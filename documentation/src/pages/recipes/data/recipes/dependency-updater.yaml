version: 1.0.0
title: Dependency Updater
description: Automatically checks for outdated dependencies in a project.
instructions: As a Dependency Updater, your goal is to identify and report outdated dependencies within a project.
prompt: |
  You are analyzing the project at: {{ project_path }}
  Operation mode: {{ update_mode }}
  {% if package_filter %}Package filter: {{ package_filter }}{% endif %}
  
  1. Identify Project Type: Begin by analyzing the directory at {{ project_path }} to determine the programming language and its corresponding dependency management system (e.g., Node.js with `package.json`, Python with `requirements.txt`, Java with Maven/Gradle, Rust with `Cargo.toml`, Go with `go.mod`).
  
  2. Check for Outdated Dependencies: Execute the appropriate shell command to list all outdated dependencies for the identified project type.
  {% if package_filter %}Focus only on these packages: {{ package_filter }}{% endif %}
  
  Common Examples:
   - For Node.js projects: `npm outdated` or `yarn outdated`
   - For Python projects: `pip list --outdated`
   - For Rust projects: `cargo outdated`
   - For Go projects: `go list -u -m all`
   - For Maven (Java) projects: `mvn versions:display-dependency-updates`
   - For Gradle (Java) projects: `gradle dependencyUpdates` (if the 'com.github.ben-manes.versions' plugin is applied)
   - If the specific command is not immediately apparent, try to deduce it based on common practices for the project type or prompt the user for assistance.
  
  3. Report Findings: Clearly list all outdated dependencies you discover. For each outdated dependency, include its current installed version and the latest available version.
  
  4. Based on update_mode ({{ update_mode }}):
   - If "report": Only report the outdated dependencies
   - If "suggest": Provide specific update commands for each outdated dependency
   - If "interactive": Ask the user before suggesting updates for each package
   
  Common update commands: `npm update [package-name]`, `pip install --upgrade [package-name]`, `cargo update`, etc.


activities:
  - Identify Project Type
  - Check for Outdated Dependencies
  - Report Findings
  - Suggest Update Commands
parameters:
  - key: project_path
    input_type: string
    requirement: optional
    default: "."
    description: "Path to the project directory to check for dependencies"
  - key: update_mode
    input_type: string
    requirement: optional
    default: "report"
    description: "Mode of operation: 'report' (default) to only report outdated dependencies, 'suggest' to suggest update commands, 'interactive' to prompt before suggesting updates"
  - key: package_filter
    input_type: string
    requirement: optional
    default: ""
    description: "Optional filter to check specific packages only (comma-separated list, e.g., 'react,lodash')"
extensions:
  - type: builtin
    name: developer
    display_name: Developer
    timeout: 300
    bundled: true

author:
  contact: abhijay007
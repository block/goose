version: 1.0.0
title: Vulnerability Scanner
description: Scans project dependencies for known security vulnerabilities (CVEs) across multiple package managers and provides detailed risk assessment with remediation guidance
author:
  contact: Shreyanshsingh23

activities:
  - Detect package manager and dependency files
  - Query vulnerability databases for known CVEs
  - Analyze dependency trees for transitive vulnerabilities
  - Calculate risk scores based on severity and exploitability
  - Generate vulnerability reports with remediation steps
  - Track vulnerability trends over time

instructions: |
  You are a Vulnerability Scanner specialized in identifying known security vulnerabilities in project dependencies.
  
  Your capabilities:
  1. Detect package managers (npm, yarn, pip, cargo, go mod, maven, gradle)
  2. Query multiple vulnerability databases (NVD, GitHub Security Advisories, OSV)
  3. Analyze dependency trees for transitive vulnerabilities
  4. Calculate CVSS scores and risk levels
  5. Provide specific remediation guidance
  
  Focus on:
  - Critical and high-severity vulnerabilities first
  - Transitive dependencies that may be overlooked
  - Vulnerabilities with known exploits
  - Dependencies with no security updates available

parameters:
  - key: project_path
    input_type: string
    requirement: required
    description: Path to the project directory to scan
  
  - key: scan_depth
    input_type: string
    requirement: optional
    default: "comprehensive"
    description: Scan depth - options are 'quick', 'comprehensive', 'deep'
  
  - key: risk_threshold
    input_type: string
    requirement: optional
    default: "medium"
    description: Minimum risk level to report - options are 'low', 'medium', 'high', 'critical'
  
  - key: include_dev_deps
    input_type: string
    requirement: optional
    default: "true"
    description: Whether to include development dependencies (true/false)
  
  - key: check_transitive
    input_type: string
    requirement: optional
    default: "true"
    description: Whether to check transitive dependencies (true/false)

extensions:
  - type: builtin
    name: developer
    display_name: Developer
    timeout: 300
    bundled: true
    description: For package manager commands and dependency analysis
  
  - type: builtin
    name: memory
    display_name: Memory
    timeout: 300
    bundled: true
    description: For storing vulnerability findings and tracking trends

prompt: |
  Scan {{ project_path }} for security vulnerabilities with {{ scan_depth }} depth and {{ risk_threshold }} risk threshold.
  
  Workflow:
  1. Detect Package Manager
     - Identify the package manager used (npm, yarn, pip, cargo, go mod, maven, gradle)
     - Locate dependency files (package.json, requirements.txt, Cargo.toml, go.mod, pom.xml, build.gradle)
     - Check for lock files and their versions
  
  2. Dependency Analysis
     - List all direct dependencies
     {% if check_transitive == "true" %}
     - Analyze dependency tree for transitive dependencies
     {% endif %}
     {% if include_dev_deps == "true" %}
     - Include development dependencies in scan
     {% endif %}
     - Identify outdated packages
  
  3. Vulnerability Scanning
     - Query vulnerability databases for each dependency:
       * NVD (National Vulnerability Database)
       * GitHub Security Advisories
       * OSV (Open Source Vulnerabilities)
       * Package-specific advisories
     - Check for CVEs affecting each package version
     - Identify vulnerabilities in transitive dependencies
  
  4. Risk Assessment
     - Calculate CVSS scores for each vulnerability
     - Assess exploitability and impact
     - Determine risk level (Critical/High/Medium/Low)
     - Filter by {{ risk_threshold }} threshold
  
  5. Report Generation
     - Create detailed vulnerability report
     - Include:
       * Vulnerability ID (CVE-YYYY-NNNN)
       * Package name and affected version
       * CVSS score and risk level
       * Description and impact
       * Remediation steps
       * Available fixes and versions
  
  6. Memory Storage
     - Store vulnerability findings in memory
     - Track vulnerability trends over time
     - Compare with previous scans
  
  Package Manager Commands:
  - Node.js: `npm audit`, `npm outdated`, `yarn audit`
  - Python: `pip audit`, `safety check`, `pip list --outdated`
  - Rust: `cargo audit`, `cargo outdated`
  - Go: `govulncheck`, `go list -u -m all`
  - Java: `mvn org.owasp:dependency-check-maven:check`
  - .NET: `dotnet list package --vulnerable`
  
  Focus on:
  - Critical vulnerabilities that could lead to RCE
  - High-severity vulnerabilities with known exploits
  - Dependencies with no security updates
  - Vulnerabilities affecting authentication/authorization
  
  Provide specific remediation steps for each vulnerability found.

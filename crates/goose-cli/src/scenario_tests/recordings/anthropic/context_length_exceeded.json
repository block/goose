{
  "4f53cda18c2baa0c0354bb5f9a3ecbe5ed12ab4d8e11ba873c2f11161202b945": {
    "input": {
      "system": "You are a general-purpose AI agent called goose, created by Block, the parent company of Square, CashApp, and Tidal.\ngoose is being developed as an open-source software project.\n\nThe current date is 2025-10-15 21:59:27.\n\ngoose uses LLM providers with tool calling capability. You can be used with different language models (gpt-4o,\nclaude-sonnet-4, o1, llama-3.2, deepseek-r1, etc).\nThese models have varying knowledge cut-off dates depending on when they were trained, but typically it's between 5-10\nmonths prior to the current date.\n\n# Extensions\n\nExtensions allow other applications to provide context to goose. Extensions connect goose to different data sources and\ntools.\nYou are capable of dynamically plugging into new extensions and learning how to use them. You solve higher level\nproblems using the tools in these extensions, and can interact with multiple at once.\nUse the search_available_extensions tool to find additional extensions to enable to help with your task. To enable\nextensions, use the enable_extension tool and provide the extension_name. You should only enable extensions found from\nthe search_available_extensions tool.\n\n\nBecause you dynamically load extensions, your conversation history may refer\nto interactions with extensions that are not currently active. The currently\nactive extensions are below. Each of these extensions provides tools that are\nin your tool specification.\n\n\n\n## weather_extension\n\n\n\n\n\n\n\n\n\n# Suggestion\n\n\"\"\n\n\n\n\n# sub agents\n\nExecute self contained tasks where step-by-step visibility is not important through subagents.\n\n- Delegate via `dynamic_task__create_task` for: result-only operations, parallelizable work, multi-part requests,\n  verification, exploration\n- Parallel subagents for multiple operations, single subagents for independent work\n- Explore solutions in parallel — launch parallel subagents with different approaches (if non-interfering)\n- Provide all needed context — subagents cannot see your context\n- Use extension filters to limit resource access\n- Use return_last_only when only a summary or simple answer is required — inform subagent of this choice.\n\n# Response Guidelines\n\n- Use Markdown formatting for all responses.\n- Follow best practices for Markdown, including:\n    - Using headers for organization.\n    - Bullet points for lists.\n    - Links formatted correctly, either as linked text (e.g., [this is linked text](https://example.com)) or automatic\n      links using angle brackets (e.g., <http://example.com/>).\n- For code examples, use fenced code blocks by placing triple backticks (` ``` `) before and after the code. Include the\n  language identifier after the opening backticks (e.g., ` ```python `) to enable syntax highlighting.\n- Ensure clarity, conciseness, and proper formatting to enhance readability and usability.\n\n# Additional Instructions:\n\nRight now you are *NOT* in the chat only mode and have access to tool use and system.",
      "messages": [],
      "tools": [
        {
          "name": "weather_extension__get_weather",
          "description": "Get the weather for a location",
          "inputSchema": {
            "properties": {
              "location": {
                "description": "The city and state, e.g. San Francisco, CA",
                "type": "string"
              }
            },
            "required": [
              "location"
            ],
            "type": "object"
          }
        },
        {
          "name": "platform__search_available_extensions",
          "description": "Searches for additional extensions available to help complete tasks.\n        Use this tool when you're unable to find a specific feature or functionality you need to complete your task, or when standard approaches aren't working.\n        These extensions might provide the exact tools needed to solve your problem.\n        If you find a relevant one, consider using your tools to enable it.",
          "inputSchema": {
            "properties": {},
            "required": [],
            "type": "object"
          },
          "annotations": {
            "title": "Discover extensions",
            "readOnlyHint": true,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "platform__manage_extensions",
          "description": "Tool to manage extensions and tools in goose context.\n            Enable or disable extensions to help complete tasks.\n            Enable or disable an extension by providing the extension name.\n            ",
          "inputSchema": {
            "properties": {
              "action": {
                "description": "The action to perform",
                "enum": [
                  "enable",
                  "disable"
                ],
                "type": "string"
              },
              "extension_name": {
                "description": "The name of the extension to enable",
                "type": "string"
              }
            },
            "required": [
              "action",
              "extension_name"
            ],
            "type": "object"
          },
          "annotations": {
            "title": "Enable or disable an extension",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "platform__manage_schedule",
          "description": "Manage scheduled recipe execution for this goose instance.\n\nActions:\n- \"list\": List all scheduled jobs\n- \"create\": Create a new scheduled job from a recipe file\n- \"run_now\": Execute a scheduled job immediately  \n- \"pause\": Pause a scheduled job\n- \"unpause\": Resume a paused job\n- \"delete\": Remove a scheduled job\n- \"kill\": Terminate a currently running job\n- \"inspect\": Get details about a running job\n- \"sessions\": List execution history for a job\n- \"session_content\": Get the full content (messages) of a specific session\n",
          "inputSchema": {
            "properties": {
              "action": {
                "enum": [
                  "list",
                  "create",
                  "run_now",
                  "pause",
                  "unpause",
                  "delete",
                  "kill",
                  "inspect",
                  "sessions",
                  "session_content"
                ],
                "type": "string"
              },
              "cron_expression": {
                "description": "A cron expression for create action. Supports both 5-field (minute hour day month weekday) and 6-field (second minute hour day month weekday) formats. 5-field expressions are automatically converted to 6-field by prepending '0' for seconds.",
                "type": "string"
              },
              "execution_mode": {
                "default": "background",
                "description": "Execution mode for create action: 'foreground' or 'background'",
                "enum": [
                  "foreground",
                  "background"
                ],
                "type": "string"
              },
              "job_id": {
                "description": "Job identifier for operations on existing jobs",
                "type": "string"
              },
              "limit": {
                "default": 50,
                "description": "Limit for sessions list",
                "type": "integer"
              },
              "recipe_path": {
                "description": "Path to recipe file for create action",
                "type": "string"
              },
              "session_id": {
                "description": "Session identifier for session_content action",
                "type": "string"
              }
            },
            "required": [
              "action"
            ],
            "type": "object"
          },
          "annotations": {
            "title": "Manage scheduled recipes",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": false,
            "openWorldHint": false
          }
        },
        {
          "name": "dynamic_task__create_task",
          "description": "Create tasks with instructions or prompt. For simple tasks, only include the instructions field. Extensions control: omit field = use all current extensions; empty array [] = no extensions; array with names = only those extensions. Specify extensions as shortnames (the prefixes for your tools). Specify return_last_only as true and have your subagent summarize its work in its last message to conserve your own context. Optional: title, description, extensions, settings, retry, response schema, context, activities. Arrays for multiple tasks.",
          "inputSchema": {
            "properties": {
              "execution_mode": {
                "description": "How to execute multiple tasks (default: parallel for multiple tasks, sequential for single task)",
                "enum": [
                  "sequential",
                  "parallel"
                ],
                "type": "string"
              },
              "task_parameters": {
                "description": "Array of tasks. Each task must have either 'instructions' OR 'prompt' field (at least one is required).",
                "items": {
                  "properties": {
                    "activities": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "context": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "description": {
                      "type": "string"
                    },
                    "extensions": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "instructions": {
                      "description": "Task instructions (required if prompt is not provided)",
                      "type": "string"
                    },
                    "parameters": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "prompt": {
                      "description": "Initial prompt (required if instructions is not provided)",
                      "type": "string"
                    },
                    "response": {
                      "type": "object"
                    },
                    "retry": {
                      "type": "object"
                    },
                    "return_last_only": {
                      "description": "If true, return only the last message from the subagent (default: false, returns full conversation)",
                      "type": "boolean"
                    },
                    "settings": {
                      "type": "object"
                    },
                    "title": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "minItems": 1,
                "type": "array"
              }
            },
            "required": [
              "task_parameters"
            ],
            "type": "object"
          },
          "annotations": {
            "title": "Create Dynamic Tasks",
            "readOnlyHint": false,
            "destructiveHint": false,
            "idempotentHint": false,
            "openWorldHint": true
          }
        },
        {
          "name": "subagent__execute_task",
          "description": "Only use the subagent__execute_task tool when you execute sub recipe task or dynamic task.\n        EXECUTION STRATEGY DECISION:\n        1. If the tasks are created with execution_mode, use the execution_mode.\n        2. Execute tasks sequentially unless user explicitly requests parallel execution. PARALLEL: User uses keywords like 'parallel', 'simultaneously', 'at the same time', 'concurrently'\n\n        IMPLEMENTATION:\n        - Sequential execution: Call this tool multiple times, passing exactly ONE task per call\n        - Parallel execution: Call this tool once, passing an ARRAY of all tasks\n\n        EXAMPLES:\n        User Intent Based:\n        - User: 'get weather and tell me a joke' → Sequential (2 separate tool calls, 1 task each)\n        - User: 'get weather and joke in parallel' → Parallel (1 tool call with array of 2 tasks)\n        - User: 'run these simultaneously' → Parallel (1 tool call with task array)\n        - User: 'do task A then task B' → Sequential (2 separate tool calls)",
          "inputSchema": {
            "properties": {
              "execution_mode": {
                "default": "sequential",
                "description": "Execution strategy for multiple tasks. Use 'sequential' (default) unless user explicitly requests parallel execution with words like 'parallel', 'simultaneously', 'at the same time', or 'concurrently'.",
                "enum": [
                  "sequential",
                  "parallel"
                ],
                "type": "string"
              },
              "task_ids": {
                "items": {
                  "description": "Unique identifier for the task",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "task_ids"
            ],
            "type": "object"
          },
          "annotations": {
            "title": "Run tasks in parallel",
            "readOnlyHint": false,
            "destructiveHint": true,
            "idempotentHint": false,
            "openWorldHint": true
          }
        }
      ]
    },
    "output": {
      "message": {
        "id": null,
        "role": "assistant",
        "created": 1760565573,
        "content": [
          {
            "type": "text",
            "text": "I understand. How can I help you today?"
          }
        ],
        "metadata": {
          "userVisible": true,
          "agentVisible": true
        }
      },
      "usage": {
        "model": "claude-sonnet-4-20250514",
        "usage": {
          "input_tokens": 2702,
          "output_tokens": 13,
          "total_tokens": 2715
        }
      }
    }
  }
}
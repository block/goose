name: Daily Test Coverage Finder

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no PR creation)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  find-untested-code:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/block/goose:latest
      options: --user root
      env:
        GOOSE_PROVIDER: ${{ vars.GOOSE_PROVIDER || 'openai' }}
        GOOSE_MODEL: ${{ vars.GOOSE_MODEL || 'gpt-4o' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4
        with:
          fetch-depth: 0
      
      - name: Install analysis tools
        run: |
          apt-get update
          apt-get install -y jq ripgrep
      
      - name: Find untested code
        id: find_untested
        run: |
          # Create analysis script
          cat << 'EOF' > /tmp/find_untested.txt
          Analyze the Rust codebase and find ONE non-trivial function that lacks test coverage.
          
          Requirements:
          1. The function should be in the crates/ directory
          2. It should have actual logic (not just a simple getter/setter)
          3. It should not already have a test
          4. Prefer functions with complexity but that are still testable in isolation
          5. Focus on the goose crate first, then goose-cli, then others
          
          Once you find a good candidate:
          1. Create a single, focused unit test for that function
          2. The test should be comprehensive but concise
          3. Place the test in the appropriate test module or create one if needed
          4. Make sure the test actually tests the function's behavior
          5. Output ONLY the git diff of your changes to /tmp/test_addition.patch
          
          Important: 
          - Only add ONE test for ONE function
          - Keep the change minimal and focused
          - The test must compile and pass
          - Include a descriptive test name
          EOF
          
          goose run -i /tmp/find_untested.txt
          
          # Check if patch was created
          if [ -f /tmp/test_addition.patch ]; then
            echo "patch_created=true" >> $GITHUB_OUTPUT
            # Extract function name from patch for PR title
            FUNC_NAME=$(grep -E "fn test_|#\[test\]" /tmp/test_addition.patch | head -1 | sed 's/.*test_//' | sed 's/(.*//' || echo "function")
            echo "function_name=${FUNC_NAME}" >> $GITHUB_OUTPUT
          else
            echo "patch_created=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Apply and verify patch
        if: steps.find_untested.outputs.patch_created == 'true'
        run: |
          # Apply the patch
          git apply /tmp/test_addition.patch
          
          # Run tests to ensure they pass
          cd crates
          cargo test --all
      
      - name: Create Pull Request
        if: steps.find_untested.outputs.patch_created == 'true' && github.event.inputs.dry_run != 'true'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # pin@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "test: add test for ${{ steps.find_untested.outputs.function_name }}"
          title: "test: add test coverage for ${{ steps.find_untested.outputs.function_name }}"
          body: |
            ## ü§ñ Automated Test Addition
            
            This PR was automatically generated by Goose to improve test coverage.
            
            ### What changed?
            Added a unit test for a previously untested function.
            
            ### Why?
            Part of our daily automated test coverage improvement initiative. Goose analyzes the codebase to find untested but important functions and creates focused unit tests for them.
            
            ### Review checklist
            - [ ] Test is meaningful and actually tests the function
            - [ ] Test name is descriptive
            - [ ] Test passes locally
            - [ ] No unnecessary changes included
            
            ---
            *Generated by the Daily Test Coverage Finder workflow*
          branch: goose/test-coverage-${{ github.run_number }}
          delete-branch: true
          labels: |
            goose-generated
            test
            automated
      
      - name: Summary
        if: always()
        env:
          PATCH_CREATED: ${{ steps.find_untested.outputs.patch_created }}
          FUNCTION_NAME: ${{ steps.find_untested.outputs.function_name }}
        run: |
          if [ "$PATCH_CREATED" == "true" ]; then
            echo "‚úÖ Successfully found untested code and created a test"
            echo "üìù Function tested: $FUNCTION_NAME"
          else
            echo "‚ÑπÔ∏è No suitable untested code found today"
          fi

# This is a **reuseable** workflow that bundles the Desktop App for macOS.
# It doesn't get triggered on its own. It gets used in multiple workflows:
#  - release.yml
#  - canary.yml
#  - pr-comment-bundle-desktop.yml
on:
  workflow_call:
    inputs:
      version:
        description: 'Version to set for the build'
        required: false
        default: ""
        type: string
      signing:
        description: 'Whether to perform signing and notarization'
        required: false
        default: false
        type: boolean
      quick_test:
        description: 'Whether to perform the quick launch test'
        required: false
        default: true
        type: boolean
      ref:
        description: 'Git ref to checkout (branch, tag, or SHA)'
        required: false
        type: string
    secrets:
      CERTIFICATE_OSX_APPLICATION:
        description: 'Certificate for macOS application signing'
        required: false
      CERTIFICATE_PASSWORD:
        description: 'Password for the macOS certificate'
        required: false
      APPLE_ID:
        description: 'Apple ID for notarization'
        required: false
      APPLE_ID_PASSWORD:
        description: 'Password for the Apple ID'
        required: false
      APPLE_TEAM_ID:
        description: 'Apple Team ID'
        required: false

name: Reusable workflow to bundle desktop app

jobs:
  bundle-desktop:
    runs-on: macos-latest
    name: Bundle Desktop App on macOS
    steps:
      # Debug information about the workflow and inputs
      - name: Debug workflow info
        env:
          WORKFLOW_NAME: ${{ github.workflow }}
          WORKFLOW_REF: ${{ github.ref }}
          EVENT_NAME: ${{ github.event_name }}
          REPOSITORY: ${{ github.repository }}
          INPUT_REF: ${{ inputs.ref }}
          INPUT_VERSION: ${{ inputs.version }}
          INPUT_SIGNING: ${{ inputs.signing }}
          INPUT_QUICK_TEST: ${{ inputs.quick_test }}
        run: |
          echo "=== Workflow Information ==="
          echo "Workflow: ${WORKFLOW_NAME}"
          echo "Ref: ${WORKFLOW_REF}"
          echo "Event: ${EVENT_NAME}"
          echo "Repo: ${REPOSITORY}"
          echo ""
          echo "=== Input Parameters ==="
          echo "Build ref: ${INPUT_REF:-main}"
          echo "Version: ${INPUT_VERSION:-not set}"
          echo "Signing: ${INPUT_SIGNING:-false}"
          echo "Quick test: ${INPUT_QUICK_TEST:-true}"

      # Check initial disk space
      - name: Check initial disk space
        run: df -h

      # Validate Signing Secrets if signing is enabled
      - name: Validate Signing Secrets
        if: ${{ inputs.signing }}
        env:
          HAS_CERT: ${{ secrets.CERTIFICATE_OSX_APPLICATION != '' }}
          HAS_CERT_PASS: ${{ secrets.CERTIFICATE_PASSWORD != '' }}
          HAS_APPLE_ID: ${{ secrets.APPLE_ID != '' }}
          HAS_APPLE_PASS: ${{ secrets.APPLE_ID_PASSWORD != '' }}
          HAS_TEAM_ID: ${{ secrets.APPLE_TEAM_ID != '' }}
        run: |
          missing=()
          [[ "${HAS_CERT}" != "true" ]] && missing+=("CERTIFICATE_OSX_APPLICATION")
          [[ "${HAS_CERT_PASS}" != "true" ]] && missing+=("CERTIFICATE_PASSWORD")
          [[ "${HAS_APPLE_ID}" != "true" ]] && missing+=("APPLE_ID")
          [[ "${HAS_APPLE_PASS}" != "true" ]] && missing+=("APPLE_ID_PASSWORD")
          [[ "${HAS_TEAM_ID}" != "true" ]] && missing+=("APPLE_TEAM_ID")
          
          if (( ${#missing[@]} > 0 )); then
            echo "Error: Missing required signing secrets:"
            printf '%s\n' "${missing[@]}"
            exit 1
          fi
          
          echo "All required signing secrets are present."

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Debug git status
        run: |
          echo "=== Git Status ==="
          git status
          echo ""
          echo "=== Current Commit ==="
          git rev-parse HEAD
          echo ""
          echo "=== Recent Commits ==="
          git log --oneline -n 5
          echo ""
          echo "=== Remote Branches ==="
          git branch -r

      # Update versions before build
      - name: Update versions
        if: ${{ inputs.version != '' }}
        env:
          VERSION: ${{ inputs.version }}
        run: |
          # Update version in Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml
          rm -f Cargo.toml.bak
          
          # Update version in package.json 
          cd ui/desktop
          npm version "${VERSION}" --no-git-tag-version --allow-same-version

      # Rest of the workflow remains unchanged...
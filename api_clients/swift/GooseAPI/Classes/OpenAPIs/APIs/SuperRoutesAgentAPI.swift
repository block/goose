//
// SuperRoutesAgentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SuperRoutesAgentAPI {

    /**

     - parameter addSubRecipesRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addSubRecipes(addSubRecipesRequest: AddSubRecipesRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: AddSubRecipesResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return addSubRecipesWithRequestBuilder(addSubRecipesRequest: addSubRecipesRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/add_sub_recipes
     - parameter addSubRecipesRequest: (body)  
     - returns: RequestBuilder<AddSubRecipesResponse> 
     */
    open class func addSubRecipesWithRequestBuilder(addSubRecipesRequest: AddSubRecipesRequest) -> RequestBuilder<AddSubRecipesResponse> {
        let localVariablePath = "/agent/add_sub_recipes"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addSubRecipesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddSubRecipesResponse>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter extendPromptRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extendPrompt(extendPromptRequest: ExtendPromptRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: ExtendPromptResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return extendPromptWithRequestBuilder(extendPromptRequest: extendPromptRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/prompt
     - parameter extendPromptRequest: (body)  
     - returns: RequestBuilder<ExtendPromptResponse> 
     */
    open class func extendPromptWithRequestBuilder(extendPromptRequest: ExtendPromptRequest) -> RequestBuilder<ExtendPromptResponse> {
        let localVariablePath = "/agent/prompt"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: extendPromptRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExtendPromptResponse>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sessionId: (query) Required session ID to scope tools to a specific session 
     - parameter extensionName: (query) Optional extension name to filter tools (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTools(sessionId: String, extensionName: String? = nil, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: [ToolInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getToolsWithRequestBuilder(sessionId: sessionId, extensionName: extensionName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /agent/tools
     - parameter sessionId: (query) Required session ID to scope tools to a specific session 
     - parameter extensionName: (query) Optional extension name to filter tools (optional)
     - returns: RequestBuilder<[ToolInfo]> 
     */
    open class func getToolsWithRequestBuilder(sessionId: String, extensionName: String? = nil) -> RequestBuilder<[ToolInfo]> {
        let localVariablePath = "/agent/tools"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "extension_name": (wrappedValue: extensionName?.encodeToJSON(), isExplode: true),
            "session_id": (wrappedValue: sessionId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ToolInfo]>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter resumeAgentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func resumeAgent(resumeAgentRequest: ResumeAgentRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Session?, _ error: Error?) -> Void)) -> RequestTask {
        return resumeAgentWithRequestBuilder(resumeAgentRequest: resumeAgentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/resume
     - parameter resumeAgentRequest: (body)  
     - returns: RequestBuilder<Session> 
     */
    open class func resumeAgentWithRequestBuilder(resumeAgentRequest: ResumeAgentRequest) -> RequestBuilder<Session> {
        let localVariablePath = "/agent/resume"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resumeAgentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Session>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter startAgentRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func startAgent(startAgentRequest: StartAgentRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Session?, _ error: Error?) -> Void)) -> RequestTask {
        return startAgentWithRequestBuilder(startAgentRequest: startAgentRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/start
     - parameter startAgentRequest: (body)  
     - returns: RequestBuilder<Session> 
     */
    open class func startAgentWithRequestBuilder(startAgentRequest: StartAgentRequest) -> RequestBuilder<Session> {
        let localVariablePath = "/agent/start"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: startAgentRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Session>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateProviderRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateAgentProvider(updateProviderRequest: UpdateProviderRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return updateAgentProviderWithRequestBuilder(updateProviderRequest: updateProviderRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/update_provider
     - parameter updateProviderRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateAgentProviderWithRequestBuilder(updateProviderRequest: UpdateProviderRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/agent/update_provider"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProviderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = GooseAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter updateRouterToolSelectorRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateRouterToolSelector(updateRouterToolSelectorRequest: UpdateRouterToolSelectorRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return updateRouterToolSelectorWithRequestBuilder(updateRouterToolSelectorRequest: updateRouterToolSelectorRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/update_router_tool_selector
     - parameter updateRouterToolSelectorRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func updateRouterToolSelectorWithRequestBuilder(updateRouterToolSelectorRequest: UpdateRouterToolSelectorRequest) -> RequestBuilder<String> {
        let localVariablePath = "/agent/update_router_tool_selector"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateRouterToolSelectorRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter sessionConfigRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateSessionConfig(sessionConfigRequest: SessionConfigRequest, apiResponseQueue: DispatchQueue = GooseAPIAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return updateSessionConfigWithRequestBuilder(sessionConfigRequest: sessionConfigRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /agent/session_config
     - parameter sessionConfigRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func updateSessionConfigWithRequestBuilder(sessionConfigRequest: SessionConfigRequest) -> RequestBuilder<String> {
        let localVariablePath = "/agent/session_config"
        let localVariableURLString = GooseAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sessionConfigRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = GooseAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

//
// ToolAnnotations.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ToolAnnotations: Codable, JSONEncodable, Hashable {

    public var destructiveHint: Bool?
    public var idempotentHint: Bool?
    public var openWorldHint: Bool?
    public var readOnlyHint: Bool?
    public var title: String?

    public init(destructiveHint: Bool? = nil, idempotentHint: Bool? = nil, openWorldHint: Bool? = nil, readOnlyHint: Bool? = nil, title: String? = nil) {
        self.destructiveHint = destructiveHint
        self.idempotentHint = idempotentHint
        self.openWorldHint = openWorldHint
        self.readOnlyHint = readOnlyHint
        self.title = title
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case destructiveHint
        case idempotentHint
        case openWorldHint
        case readOnlyHint
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(destructiveHint, forKey: .destructiveHint)
        try container.encodeIfPresent(idempotentHint, forKey: .idempotentHint)
        try container.encodeIfPresent(openWorldHint, forKey: .openWorldHint)
        try container.encodeIfPresent(readOnlyHint, forKey: .readOnlyHint)
        try container.encodeIfPresent(title, forKey: .title)
    }
}


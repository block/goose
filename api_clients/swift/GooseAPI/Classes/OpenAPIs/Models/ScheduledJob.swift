//
// ScheduledJob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ScheduledJob: Codable, JSONEncodable, Hashable {

    public var cron: String
    public var currentSessionId: String?
    public var currentlyRunning: Bool?
    public var executionMode: String?
    public var id: String
    public var lastRun: Date?
    public var paused: Bool?
    public var processStartTime: Date?
    public var source: String

    public init(cron: String, currentSessionId: String? = nil, currentlyRunning: Bool? = nil, executionMode: String? = nil, id: String, lastRun: Date? = nil, paused: Bool? = nil, processStartTime: Date? = nil, source: String) {
        self.cron = cron
        self.currentSessionId = currentSessionId
        self.currentlyRunning = currentlyRunning
        self.executionMode = executionMode
        self.id = id
        self.lastRun = lastRun
        self.paused = paused
        self.processStartTime = processStartTime
        self.source = source
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cron
        case currentSessionId = "current_session_id"
        case currentlyRunning = "currently_running"
        case executionMode = "execution_mode"
        case id
        case lastRun = "last_run"
        case paused
        case processStartTime = "process_start_time"
        case source
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cron, forKey: .cron)
        try container.encodeIfPresent(currentSessionId, forKey: .currentSessionId)
        try container.encodeIfPresent(currentlyRunning, forKey: .currentlyRunning)
        try container.encodeIfPresent(executionMode, forKey: .executionMode)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(lastRun, forKey: .lastRun)
        try container.encodeIfPresent(paused, forKey: .paused)
        try container.encodeIfPresent(processStartTime, forKey: .processStartTime)
        try container.encode(source, forKey: .source)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ScheduledJob: Identifiable {}

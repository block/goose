//
// ExtensionConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represents the different types of MCP extensions that can be added to the manager */
public enum ExtensionConfig: Codable, JSONEncodable, Hashable {
    case typeExtensionConfigOneOf(ExtensionConfigOneOf)
    case typeExtensionConfigOneOf1(ExtensionConfigOneOf1)
    case typeExtensionConfigOneOf2(ExtensionConfigOneOf2)
    case typeExtensionConfigOneOf3(ExtensionConfigOneOf3)
    case typeExtensionConfigOneOf4(ExtensionConfigOneOf4)
    case typeExtensionConfigOneOf5(ExtensionConfigOneOf5)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeExtensionConfigOneOf(let value):
            try container.encode(value)
        case .typeExtensionConfigOneOf1(let value):
            try container.encode(value)
        case .typeExtensionConfigOneOf2(let value):
            try container.encode(value)
        case .typeExtensionConfigOneOf3(let value):
            try container.encode(value)
        case .typeExtensionConfigOneOf4(let value):
            try container.encode(value)
        case .typeExtensionConfigOneOf5(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(ExtensionConfigOneOf.self) {
            self = .typeExtensionConfigOneOf(value)
        } else if let value = try? container.decode(ExtensionConfigOneOf1.self) {
            self = .typeExtensionConfigOneOf1(value)
        } else if let value = try? container.decode(ExtensionConfigOneOf2.self) {
            self = .typeExtensionConfigOneOf2(value)
        } else if let value = try? container.decode(ExtensionConfigOneOf3.self) {
            self = .typeExtensionConfigOneOf3(value)
        } else if let value = try? container.decode(ExtensionConfigOneOf4.self) {
            self = .typeExtensionConfigOneOf4(value)
        } else if let value = try? container.decode(ExtensionConfigOneOf5.self) {
            self = .typeExtensionConfigOneOf5(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of ExtensionConfig"))
        }
    }
}


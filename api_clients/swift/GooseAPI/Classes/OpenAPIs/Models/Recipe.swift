//
// Recipe.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Recipe represents a personalized, user-generated agent configuration that defines specific behaviors and capabilities within the goose system.  # Fields  ## Required Fields * &#x60;version&#x60; - Semantic version of the Recipe file format (defaults to \&quot;1.0.0\&quot;) * &#x60;title&#x60; - Short, descriptive name of the Recipe * &#x60;description&#x60; - Detailed description explaining the Recipe&#39;s purpose and functionality * &#x60;Instructions&#x60; - Instructions that defines the Recipe&#39;s behavior  ## Optional Fields * &#x60;prompt&#x60; - the initial prompt to the session to start with * &#x60;extensions&#x60; - List of extension configurations required by the Recipe * &#x60;context&#x60; - Supplementary context information for the Recipe * &#x60;activities&#x60; - Activity labels that appear when loading the Recipe * &#x60;author&#x60; - Information about the Recipe&#39;s creator and metadata * &#x60;parameters&#x60; - Additional parameters for the Recipe * &#x60;response&#x60; - Response configuration including JSON schema validation * &#x60;retry&#x60; - Retry configuration for automated validation and recovery # Example   use goose::recipe::Recipe;  // Using the builder pattern let recipe &#x3D; Recipe::builder() .title(\&quot;Example Agent\&quot;) .description(\&quot;An example Recipe configuration\&quot;) .instructions(\&quot;Act as a helpful assistant\&quot;) .build() .expect(\&quot;Missing required fields\&quot;);  // Or using struct initialization let recipe &#x3D; Recipe { version: \&quot;1.0.0\&quot;.to_string(), title: \&quot;Example Agent\&quot;.to_string(), description: \&quot;An example Recipe configuration\&quot;.to_string(), instructions: Some(\&quot;Act as a helpful assistant\&quot;.to_string()), prompt: None, extensions: None, context: None, activities: None, author: None, settings: None, parameters: None, response: None, sub_recipes: None, retry: None, };  */
public struct Recipe: Codable, JSONEncodable, Hashable {

    public var activities: [String]?
    public var author: Author?
    public var context: [String]?
    public var description: String
    public var extensions: [ExtensionConfig]?
    public var instructions: String?
    public var parameters: [RecipeParameter]?
    public var prompt: String?
    public var response: ModelResponse?
    public var retry: RetryConfig?
    public var settings: Settings?
    public var subRecipes: [SubRecipe]?
    public var title: String
    public var version: String?

    public init(activities: [String]? = nil, author: Author? = nil, context: [String]? = nil, description: String, extensions: [ExtensionConfig]? = nil, instructions: String? = nil, parameters: [RecipeParameter]? = nil, prompt: String? = nil, response: ModelResponse? = nil, retry: RetryConfig? = nil, settings: Settings? = nil, subRecipes: [SubRecipe]? = nil, title: String, version: String? = nil) {
        self.activities = activities
        self.author = author
        self.context = context
        self.description = description
        self.extensions = extensions
        self.instructions = instructions
        self.parameters = parameters
        self.prompt = prompt
        self.response = response
        self.retry = retry
        self.settings = settings
        self.subRecipes = subRecipes
        self.title = title
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activities
        case author
        case context
        case description
        case extensions
        case instructions
        case parameters
        case prompt
        case response
        case retry
        case settings
        case subRecipes = "sub_recipes"
        case title
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activities, forKey: .activities)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(extensions, forKey: .extensions)
        try container.encodeIfPresent(instructions, forKey: .instructions)
        try container.encodeIfPresent(parameters, forKey: .parameters)
        try container.encodeIfPresent(prompt, forKey: .prompt)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(retry, forKey: .retry)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(subRecipes, forKey: .subRecipes)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(version, forKey: .version)
    }
}


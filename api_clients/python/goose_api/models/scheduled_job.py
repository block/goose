# coding: utf-8

"""
    goose-server

    An AI agent

    The version of the OpenAPI document: 1.9.0
    Contact: ai-oss-tools@block.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScheduledJob(BaseModel):
    """
    ScheduledJob
    """ # noqa: E501
    cron: StrictStr
    current_session_id: Optional[StrictStr] = None
    currently_running: Optional[StrictBool] = None
    execution_mode: Optional[StrictStr] = None
    id: StrictStr
    last_run: Optional[datetime] = None
    paused: Optional[StrictBool] = None
    process_start_time: Optional[datetime] = None
    source: StrictStr
    __properties: ClassVar[List[str]] = ["cron", "current_session_id", "currently_running", "execution_mode", "id", "last_run", "paused", "process_start_time", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if current_session_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_session_id is None and "current_session_id" in self.model_fields_set:
            _dict['current_session_id'] = None

        # set to None if execution_mode (nullable) is None
        # and model_fields_set contains the field
        if self.execution_mode is None and "execution_mode" in self.model_fields_set:
            _dict['execution_mode'] = None

        # set to None if last_run (nullable) is None
        # and model_fields_set contains the field
        if self.last_run is None and "last_run" in self.model_fields_set:
            _dict['last_run'] = None

        # set to None if process_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.process_start_time is None and "process_start_time" in self.model_fields_set:
            _dict['process_start_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cron": obj.get("cron"),
            "current_session_id": obj.get("current_session_id"),
            "currently_running": obj.get("currently_running"),
            "execution_mode": obj.get("execution_mode"),
            "id": obj.get("id"),
            "last_run": obj.get("last_run"),
            "paused": obj.get("paused"),
            "process_start_time": obj.get("process_start_time"),
            "source": obj.get("source")
        })
        return _obj



# coding: utf-8

"""
    goose-server

    An AI agent

    The version of the OpenAPI document: 1.9.0
    Contact: ai-oss-tools@block.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goose_api.models.recipe import Recipe

class TestRecipe(unittest.TestCase):
    """Recipe unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Recipe:
        """Test Recipe
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Recipe`
        """
        model = Recipe()
        if include_optional:
            return Recipe(
                activities = [
                    ''
                    ],
                author = goose_api.models.author.Author(
                    contact = '', 
                    metadata = '', ),
                context = [
                    ''
                    ],
                description = '',
                extensions = [
                    null
                    ],
                instructions = '',
                parameters = [
                    goose_api.models.recipe_parameter.RecipeParameter(
                        default = '', 
                        description = '', 
                        input_type = 'string', 
                        key = '', 
                        options = [
                            ''
                            ], 
                        requirement = 'required', )
                    ],
                prompt = '',
                response = goose_api.models.response.Response(
                    json_schema = null, ),
                retry = goose_api.models.retry_config.RetryConfig(
                    checks = [
                        goose_api.models.success_check.SuccessCheck(
                            command = '', 
                            type = 'Shell', )
                        ], 
                    max_retries = 0, 
                    on_failure = '', 
                    on_failure_timeout_seconds = 0, 
                    timeout_seconds = 0, ),
                settings = goose_api.models.settings.Settings(
                    goose_model = '', 
                    goose_provider = '', 
                    temperature = 1.337, ),
                sub_recipes = [
                    goose_api.models.sub_recipe.SubRecipe(
                        description = '', 
                        name = '', 
                        path = '', 
                        sequential_when_repeated = True, 
                        values = {
                            'key' : ''
                            }, )
                    ],
                title = '',
                version = ''
            )
        else:
            return Recipe(
                description = '',
                title = '',
        )
        """

    def testRecipe(self):
        """Test Recipe"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

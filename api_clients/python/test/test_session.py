# coding: utf-8

"""
    goose-server

    An AI agent

    The version of the OpenAPI document: 1.9.0
    Contact: ai-oss-tools@block.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goose_api.models.session import Session

class TestSession(unittest.TestCase):
    """Session unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Session:
        """Test Session
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Session`
        """
        model = Session()
        if include_optional:
            return Session(
                accumulated_input_tokens = 56,
                accumulated_output_tokens = 56,
                accumulated_total_tokens = 56,
                conversation = [
                    goose_api.models.message.Message(
                        content = [
                            null
                            ], 
                        created = 56, 
                        id = '', 
                        metadata = goose_api.models.message_metadata.MessageMetadata(
                            agent_visible = True, 
                            user_visible = True, ), 
                        role = '', )
                    ],
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                extension_data = {
                    'key' : null
                    },
                id = '',
                input_tokens = 56,
                message_count = 0,
                output_tokens = 56,
                recipe = goose_api.models.recipe.Recipe(
                    activities = [
                        ''
                        ], 
                    author = null, 
                    context = [
                        ''
                        ], 
                    description = '', 
                    extensions = [
                        null
                        ], 
                    instructions = '', 
                    parameters = [
                        goose_api.models.recipe_parameter.RecipeParameter(
                            default = '', 
                            description = '', 
                            input_type = 'string', 
                            key = '', 
                            options = [
                                ''
                                ], 
                            requirement = 'required', )
                        ], 
                    prompt = '', 
                    response = null, 
                    retry = null, 
                    settings = null, 
                    sub_recipes = [
                        goose_api.models.sub_recipe.SubRecipe(
                            description = '', 
                            name = '', 
                            path = '', 
                            sequential_when_repeated = True, 
                            values = {
                                'key' : ''
                                }, )
                        ], 
                    title = '', 
                    version = '', ),
                schedule_id = '',
                total_tokens = 56,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                working_dir = ''
            )
        else:
            return Session(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                description = '',
                extension_data = {
                    'key' : null
                    },
                id = '',
                message_count = 0,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                working_dir = '',
        )
        """

    def testSession(self):
        """Test Session"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

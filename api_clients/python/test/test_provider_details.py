# coding: utf-8

"""
    goose-server

    An AI agent

    The version of the OpenAPI document: 1.9.0
    Contact: ai-oss-tools@block.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from goose_api.models.provider_details import ProviderDetails

class TestProviderDetails(unittest.TestCase):
    """ProviderDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProviderDetails:
        """Test ProviderDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProviderDetails`
        """
        model = ProviderDetails()
        if include_optional:
            return ProviderDetails(
                is_configured = True,
                metadata = goose_api.models.provider_metadata.ProviderMetadata(
                    config_keys = [
                        goose_api.models.config_key.ConfigKey(
                            default = '', 
                            name = '', 
                            oauth_flow = True, 
                            required = True, 
                            secret = True, )
                        ], 
                    default_model = '', 
                    description = '', 
                    display_name = '', 
                    known_models = [
                        goose_api.models.model_info.ModelInfo(
                            context_limit = 0, 
                            currency = '', 
                            input_token_cost = 1.337, 
                            name = '', 
                            output_token_cost = 1.337, 
                            supports_cache_control = True, )
                        ], 
                    model_doc_link = '', 
                    name = '', ),
                name = ''
            )
        else:
            return ProviderDetails(
                is_configured = True,
                metadata = goose_api.models.provider_metadata.ProviderMetadata(
                    config_keys = [
                        goose_api.models.config_key.ConfigKey(
                            default = '', 
                            name = '', 
                            oauth_flow = True, 
                            required = True, 
                            secret = True, )
                        ], 
                    default_model = '', 
                    description = '', 
                    display_name = '', 
                    known_models = [
                        goose_api.models.model_info.ModelInfo(
                            context_limit = 0, 
                            currency = '', 
                            input_token_cost = 1.337, 
                            name = '', 
                            output_token_cost = 1.337, 
                            supports_cache_control = True, )
                        ], 
                    model_doc_link = '', 
                    name = '', ),
                name = '',
        )
        """

    def testProviderDetails(self):
        """Test ProviderDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

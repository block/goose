[{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editorContent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":82,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditorContent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":82,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'editorFile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":83,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setEditorFile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":83,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setErrorMessage' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":84,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showDebug' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":90,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setShowDebug' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":90,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processedMessageIds' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":96,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":31},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'messages.length'. Either include it or remove the dependency array.","line":140,"column":8,"nodeType":"ArrayExpression","endLine":140,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [currentSessionId, messages.length]","fix":{"range":[5522,5540],"text":"[currentSessionId, messages.length]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'currentMessageId', 'intermediateText', and 'isLoading'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMessages' needs the current value of 'currentMessageId'.","line":367,"column":8,"nodeType":"ArrayExpression","endLine":367,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [currentMessageId, intermediateText, isLoading]","fix":{"range":[16551,16553],"text":"[currentMessageId, intermediateText, isLoading]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getActiveEditorContent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":378,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":378,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleSubmit' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":474,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":474,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleInputChange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":480,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":480,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'messagesHaveIdenticalContent' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":485,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":485,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used. Allowed unused args must match /^_/u.","line":570,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":570,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'GeneratingIndicator' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":632,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":632,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'node' is defined but never used. Allowed unused args must match /^_/u.","line":640,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":640,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'copyMessageToClipboard' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":711,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":711,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'removeCodeReference' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":733,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":733,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CodeReferenceChip' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":738,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":738,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ContextInfoButton' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":784,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":784,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ContextInfoPanel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":813,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":813,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState, useRef } from 'react';\nimport './vscodeStyles.css'; // Import VS Code theme variables\n// Import React Markdown for rendering markdown content\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n// Import syntax highlighter for code blocks\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\n// Import the VSCode API for communicating with the extension\nimport { vscode } from './vscode';\n// Import types\nimport { MessageType } from '../../src/shared/messageTypes';\nimport { Message } from '../../src/shared/types';\n// Import new components\nimport { Header } from './components/Header';\nimport { SessionList, SessionMetadata } from './components/SessionList';\n\n// VS Code API is available as a global when running in a webview\ndeclare global {\n    interface Window {\n        acquireVsCodeApi: () => {\n            postMessage: (message: any) => void;\n            getState: () => any;\n            setState: (state: any) => void;\n        };\n    }\n}\n\n// Types\ninterface CodeReference {\n    id: string;\n    filePath: string;\n    fileName: string;\n    startLine: number;\n    endLine: number;\n    selectedText: string;\n    languageId: string;\n}\n\n// Add WorkspaceContext type\ninterface WorkspaceContext {\n    currentLanguage?: string;\n    projectType?: string;\n    currentFile?: string;\n    currentFilePath?: string;\n    diagnostics?: any[];\n    recentFiles?: string[];\n    openFiles?: string[];\n}\n\n// Message types for communication with the extension\nenum MessageType {\n    HELLO = 'hello',\n    GET_ACTIVE_EDITOR_CONTENT = 'getActiveEditorContent',\n    ACTIVE_EDITOR_CONTENT = 'activeEditorContent',\n    ERROR = 'error',\n    SERVER_STATUS = 'serverStatus',\n    CHAT_MESSAGE = 'chatMessage',\n    SEND_CHAT_MESSAGE = 'sendChatMessage',\n    AI_MESSAGE = 'aiMessage',\n    STOP_GENERATION = 'stopGeneration',\n    GENERATION_FINISHED = 'generationFinished',\n    CODE_REFERENCE = 'codeReference',\n    ADD_CODE_REFERENCE = 'addCodeReference',\n    REMOVE_CODE_REFERENCE = 'removeCodeReference',\n    GET_WORKSPACE_CONTEXT = 'getWorkspaceContext',\n    WORKSPACE_CONTEXT = 'workspaceContext',\n    CHAT_RESPONSE = 'chatResponse',\n    SESSIONS_LIST = 'sessionsList',\n    SESSION_LOADED = 'sessionLoaded',\n    SWITCH_SESSION = 'switchSession',\n    CREATE_SESSION = 'createSession',\n    RENAME_SESSION = 'renameSession',\n    DELETE_SESSION = 'deleteSession',\n    GET_SESSIONS = 'getSessions'\n}\n\n// Acquire VS Code API\nconst vscode = window.acquireVsCodeApi();\n\nconst App: React.FC = () => {\n    const [editorContent, setEditorContent] = useState<string | null>(null);\n    const [editorFile, setEditorFile] = useState<string | null>(null);\n    const [errorMessage, setErrorMessage] = useState<string | null>(null);\n    const [inputMessage, setInputMessage] = useState<string>('');\n    const [messages, setMessages] = useState<Message[]>([]);\n    const [serverStatus, setServerStatus] = useState<string>('stopped');\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [currentMessageId, setCurrentMessageId] = useState<string | null>(null);\n    const [showDebug, setShowDebug] = useState<boolean>(false);\n    const [copiedMessageId, setCopiedMessageId] = useState<string | null>(null);\n    const [codeReferences, setCodeReferences] = useState<CodeReference[]>([]);\n    const [workspaceContext, setWorkspaceContext] = useState<WorkspaceContext | null>(null);\n    const [showContextInfo, setShowContextInfo] = useState<boolean>(false);\n    const messagesEndRef = useRef<HTMLDivElement>(null);\n    const [processedMessageIds, setProcessedMessageIds] = useState<Set<string>>(new Set());\n    const [intermediateText, setIntermediateText] = useState<string | null>(null);\n\n    // New state for session management\n    const [sessions, setSessions] = useState<SessionMetadata[]>([]);\n    const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n    const [showSessionDrawer, setShowSessionDrawer] = useState<boolean>(false);\n\n    // Scroll to bottom whenever messages change\n    useEffect(() => {\n        if (messagesEndRef.current) {\n            // Use a slight delay to ensure the UI has fully rendered\n            setTimeout(() => {\n                messagesEndRef.current?.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'end',  // Align to the bottom of the container\n                    inline: 'nearest'\n                });\n            }, 100);\n        }\n    }, [messages]);\n\n    // Add a separate effect for session loading to properly handle scroll\n    useEffect(() => {\n        if (currentSessionId && messages.length > 0) {\n            // Allow the DOM to update first\n            setTimeout(() => {\n                // Find the container element\n                const container = document.querySelector('.message-container');\n                if (container) {\n                    // Scroll to show the header first, then smoothly to the bottom\n                    window.scrollTo(0, 0);\n                    container.scrollTop = 0;\n\n                    // After a short delay, scroll to the bottom\n                    setTimeout(() => {\n                        messagesEndRef.current?.scrollIntoView({\n                            behavior: 'smooth',\n                            block: 'end'\n                        });\n                    }, 200);\n                }\n            }, 150);\n        }\n    }, [currentSessionId]);\n\n    useEffect(() => {\n        // Initial setup\n        sendHelloMessage();\n        fetchSessions(); // Fetch sessions on initial load\n\n        // Set up message event listener\n        const handleMessage = (event: MessageEvent) => {\n            const message = event.data;\n            console.log('Received message from extension:', message);\n\n            // Ignore messages without a command\n            if (!message || !message.command) {\n                return;\n            }\n\n            switch (message.command) {\n                case MessageType.HELLO:\n                    // Extension acknowledged our presence\n                    break;\n                case MessageType.ACTIVE_EDITOR_CONTENT:\n                    // Received active editor content\n                    break;\n                case MessageType.SERVER_STATUS:\n                    console.log('Received server status:', message.status);\n                    setServerStatus(message.status);\n                    break;\n                case MessageType.CHAT_RESPONSE:\n                    // Only process if the message has an actual message object\n                    if (!message.message) {\n                        console.error('Received CHAT_RESPONSE without message object');\n                        return;\n                    }\n\n                    console.log('Processing CHAT_RESPONSE:', message.message);\n                    // Check for duplicate messages by ID (especially important for streaming)\n                    const messageId = message.message.id;\n\n                    // Make sure the message has valid content\n                    if (!message.message.content) {\n                        message.message.content = [{ type: 'text', text: '' }];\n                    }\n\n                    // Get the text content from the message for intermediate display\n                    const textContent = message.message.content.find(item =>\n                        item.type === 'text' && item.text)?.text || '';\n\n                    // If we're generating and this is from the current message ID, store it as intermediate text\n                    if (isLoading && currentMessageId && messageId === currentMessageId) {\n                        // Set the intermediate text for display in the generating indicator\n                        setIntermediateText(textContent);\n                        return; // Don't add to messages array yet\n                    } else if (isLoading && !currentMessageId) {\n                        // This is likely a stray update from a previous generation\n                        // Store it as intermediateText anyway\n                        setIntermediateText(textContent);\n                        return;\n                    }\n\n                    // Don't skip empty assistant messages during generation\n                    // Only skip empty messages after generation is complete\n                    const isInProgress = isLoading && currentMessageId !== null;\n                    const hasContent = message.message.content.some(item =>\n                        item.type === 'text' && item.text && item.text.trim() !== '');\n\n                    if (!hasContent && message.message.role === 'assistant' && !isInProgress) {\n                        console.log('Skipping empty assistant message');\n                        return;\n                    }\n\n                    setMessages(prevMessages => {\n                        // Debug logging\n                        console.log('Current messages:', prevMessages.length);\n\n                        let updatedMessages;\n\n                        // Check if this message already exists in our state (by ID)\n                        const existingIndex = prevMessages.findIndex(m => m.id === messageId);\n\n                        if (existingIndex !== -1) {\n                            // Update existing message\n                            const updatedMessagesArray = [...prevMessages];\n                            updatedMessagesArray[existingIndex] = message.message;\n                            updatedMessages = updatedMessagesArray;\n                            console.log('Updated existing message at index', existingIndex);\n                        } else {\n                            // Append the new message\n                            updatedMessages = [...prevMessages, message.message];\n                            console.log('Added new message, total count:', updatedMessages.length);\n                        }\n\n                        return updatedMessages;\n                    });\n                    break;\n                case MessageType.GENERATION_FINISHED:\n                    console.log('Received GENERATION_FINISHED event');\n\n                    // If there's intermediate text, add it as the final message\n                    if (intermediateText && currentMessageId) {\n                        const currentTimestamp = Date.now();\n                        const finalMessage: Message = {\n                            id: currentMessageId,\n                            role: 'assistant',\n                            created: currentTimestamp, // Always use current timestamp\n                            content: [{\n                                type: 'text',\n                                text: intermediateText\n                            }]\n                        };\n\n                        console.log(`Setting final message with timestamp: ${new Date(currentTimestamp).toLocaleTimeString()}`);\n\n                        setMessages(prevMessages => {\n                            // Check if this message already exists in our state\n                            const existingIndex = prevMessages.findIndex(m => m.id === currentMessageId);\n\n                            if (existingIndex !== -1) {\n                                // Update existing message\n                                const updatedMessagesArray = [...prevMessages];\n                                updatedMessagesArray[existingIndex] = finalMessage;\n                                return updatedMessagesArray;\n                            } else {\n                                // Append the new message\n                                return [...prevMessages, finalMessage];\n                            }\n                        });\n                    }\n\n                    setIsLoading(false);\n                    setCurrentMessageId(null);\n                    setIntermediateText(null); // Clear the intermediate text\n                    break;\n                case MessageType.ADD_CODE_REFERENCE:\n                    // Add a code reference to the UI\n                    if (message.codeReference) {\n                        setCodeReferences(prev => [\n                            ...prev,\n                            message.codeReference\n                        ]);\n                    }\n                    break;\n                case MessageType.CHAT_MESSAGE:\n                    // Pre-populate input with a message\n                    if (message.text) {\n                        setInputMessage(message.text);\n                    }\n                    break;\n                case MessageType.WORKSPACE_CONTEXT:\n                    if (message.context) {\n                        setWorkspaceContext(message.context);\n                    }\n                    break;\n                case MessageType.SESSIONS_LIST:\n                    // Handle sessions list\n                    if (message.sessions) {\n                        console.log('Received sessions list:', message.sessions);\n                        // Ensure we're setting an array and validate session data structure\n                        const validSessions = Array.isArray(message.sessions)\n                            ? message.sessions.filter(session =>\n                                session &&\n                                typeof session === 'object' &&\n                                session.id &&\n                                session.metadata &&\n                                typeof session.metadata === 'object')\n                            : [];\n\n                        console.log('Valid sessions after filtering:', validSessions.length);\n                        setSessions(validSessions);\n                    }\n                    break;\n                case MessageType.SESSION_LOADED:\n                    // Handle session loaded event\n                    if (message.sessionId) {\n                        console.log('Loaded session:', message.sessionId);\n                        setCurrentSessionId(message.sessionId);\n\n                        // If messages are provided, replace the current messages with them\n                        if (message.messages && Array.isArray(message.messages)) {\n                            console.log('Setting messages from loaded session');\n\n                            // Normalize timestamps for all loaded messages\n                            const normalizedMessages = message.messages.map((msg, index) => {\n                                // Create a copy of the message\n                                const normalizedMsg = { ...msg };\n\n                                // Calculate a timestamp that's 1 minute earlier for each message going backward\n                                // This preserves the conversation order but with current times\n                                const now = Date.now();\n                                normalizedMsg.created = now - (message.messages.length - index) * 60000;\n\n                                return normalizedMsg;\n                            });\n\n                            // Reset scroll position\n                            const container = document.querySelector('.message-container');\n                            if (container) {\n                                container.scrollTop = 0;\n                            }\n\n                            // Set the normalized messages\n                            setMessages(normalizedMessages);\n\n                            // Ensure scrolling works after loading session\n                            setTimeout(() => {\n                                const container = document.querySelector('.message-container');\n                                if (container) {\n                                    // First make sure we're at the top\n                                    container.scrollTop = 0;\n                                }\n                            }, 50);\n                        }\n                    }\n                    break;\n                case MessageType.SEND_CHAT_MESSAGE:\n                    // No need for duplicate detection here - we'll use the messageId system\n                    break;\n                default:\n                    // Unhandled message type\n                    break;\n            }\n        };\n\n        window.addEventListener('message', handleMessage);\n\n        // Clean up event listener\n        return () => window.removeEventListener('message', handleMessage);\n    }, []);\n\n    // Send a hello message to the extension\n    const sendHelloMessage = () => {\n        vscode.postMessage({\n            command: MessageType.HELLO,\n            text: 'Hello from the webview!'\n        });\n    };\n\n    // Request active editor content\n    const getActiveEditorContent = () => {\n        vscode.postMessage({\n            command: MessageType.GET_ACTIVE_EDITOR_CONTENT\n        });\n    };\n\n    // Add a wrapper function for setMessages at the beginning of the component\n    const safeguardedSetMessages = (messageUpdater: Message[] | ((prevMessages: Message[]) => Message[])) => {\n        setMessages(prevMessages => {\n            let newMessages;\n\n            if (typeof messageUpdater === 'function') {\n                newMessages = messageUpdater(prevMessages);\n            } else {\n                newMessages = messageUpdater;\n            }\n\n            // Never allow empty array (causes blank screen)\n            if (newMessages.length === 0) {\n                console.warn('Prevented setting empty messages array');\n                return prevMessages;\n            }\n\n            return newMessages;\n        });\n    };\n\n    // Send a chat message\n    const sendChatMessage = () => {\n        if (!inputMessage.trim() && codeReferences.length === 0) {return;}\n\n        // Create a unique ID for this message\n        const messageId = `user_${Date.now()}`;\n\n        // Format code references for display in the UI\n        const content = [];\n\n        // Add the text content if it's not empty\n        if (inputMessage.trim()) {\n            content.push({\n                type: 'text',\n                text: inputMessage\n            });\n        }\n\n        // Add code references as separate content items - only include file references, not the code itself\n        if (codeReferences.length > 0) {\n            for (const ref of codeReferences) {\n                content.push({\n                    type: 'text',\n                    text: `From ${ref.fileName}:${ref.startLine}-${ref.endLine}`\n                });\n            }\n        }\n\n        // Create a user message object with all content\n        const userMessage: Message = {\n            id: messageId,\n            role: 'user',\n            created: Date.now(),\n            content: content\n        };\n\n        // Update messages state with the new message\n        safeguardedSetMessages(prevMessages => [...prevMessages, userMessage]);\n\n        // Add the ID to processed set to prevent duplicates if we get it back from the extension\n        setProcessedMessageIds(prev => new Set(prev).add(messageId));\n\n        // Send message to extension\n        vscode.postMessage({\n            command: MessageType.SEND_CHAT_MESSAGE,\n            text: inputMessage,\n            codeReferences: codeReferences,\n            messageId: messageId,\n            sessionId: currentSessionId\n        });\n\n        // Reset input and code references\n        setInputMessage('');\n        setCodeReferences([]);\n        setIsLoading(true);\n        setCurrentMessageId(messageId);\n        setIntermediateText(null); // Clear any previous intermediate text\n    };\n\n    // Stop AI generation\n    const stopGeneration = () => {\n        vscode.postMessage({\n            command: MessageType.STOP_GENERATION\n        });\n        setIsLoading(false);\n        console.log('Setting isLoading to FALSE (stop generation)');\n    };\n\n    // Handle form submission\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        sendChatMessage();\n    };\n\n    // Handle input change \n    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setInputMessage(e.target.value);\n    };\n\n    // Helper to check if two messages have identical content\n    const messagesHaveIdenticalContent = (msg1: Message, msg2: Message): boolean => {\n        if (msg1.role !== msg2.role) {return false;}\n        if (!msg1.content || !msg2.content) {return false;}\n        if (msg1.content.length !== msg2.content.length) {return false;}\n\n        for (let i = 0; i < msg1.content.length; i++) {\n            if (msg1.content[i].type !== msg2.content[i].type) {return false;}\n            if (msg1.content[i].text !== msg2.content[i].text) {return false;}\n        }\n\n        return true;\n    };\n\n    // Render content of a message\n    const renderMessageContent = (content: any[]) => {\n        // If content array is empty or null/undefined, show a placeholder\n        if (!content || content.length === 0) {\n            return (\n                <div className=\"message-text empty-message\">\n                    <i>Empty response. Waiting for content...</i>\n                </div>\n            );\n        }\n\n        // Create a filtered array of valid content items\n        const validItems = content.filter(item => {\n            // First check if item exists\n            if (!item) {\n                return false;\n            }\n\n            // Check if it's a text item (most common)\n            if (item.type === 'text') {\n                // Allow even empty strings during generation\n                return typeof item.text === 'string';\n            }\n\n            // Other content types might be valid, keep them\n            return true;\n        });\n\n        // If we have no valid items after filtering, show the fallback\n        if (validItems.length === 0) {\n            return (\n                <div className=\"message-text empty-message\">\n                    <i>Waiting for response content...</i>\n                </div>\n            );\n        }\n\n        // Map valid content items to components\n        return validItems.map((item, index) => {\n            if (item.type === 'text') {\n                // If the text is empty, show generating message\n                if (!item.text || item.text.trim() === '') {\n                    return (\n                        <div key={index} className=\"message-text empty-message\">\n                            <i>Generating content...</i>\n                        </div>\n                    );\n                }\n\n                // Check if the content appears to be JSON data that needs parsing\n                let textContent = item.text;\n                if (typeof textContent === 'string' && textContent.trim().startsWith('data:')) {\n                    try {\n                        // Extract the JSON part\n                        const jsonMatch = textContent.match(/data:\\s*(\\{.*\\})/);\n                        if (jsonMatch && jsonMatch[1]) {\n                            const jsonData = JSON.parse(jsonMatch[1]);\n                            if (jsonData.message && typeof jsonData.message === 'string') {\n                                textContent = jsonData.message;\n                            }\n                        }\n                    } catch (e) {\n                        console.error('Error parsing JSON in message:', e);\n                    }\n                }\n\n                return (\n                    <div key={index} className=\"message-text\">\n                        <ReactMarkdown\n                            remarkPlugins={[remarkGfm]}\n                            components={{\n                                // Custom code block rendering with syntax highlighting\n                                code({ node, inline, className, children, ...props }) {\n                                    const match = /language-(\\w+)/.exec(className || '');\n                                    const lang = match ? match[1] : '';\n\n                                    if (!inline) {\n                                        return (\n                                            <SyntaxHighlighter\n                                                style={{\n                                                    ...vscDarkPlus,\n                                                    'pre[class*=\"language-\"]': {\n                                                        background: 'var(--vscode-textCodeBlock-background)',\n                                                        margin: '1em 0',\n                                                        padding: '1em',\n                                                        borderRadius: '4px',\n                                                        border: '1px solid var(--vscode-widget-border)'\n                                                    },\n                                                    'code[class*=\"language-\"]': {\n                                                        background: 'var(--vscode-textCodeBlock-background)',\n                                                        padding: '0',\n                                                        fontFamily: 'var(--vscode-editor-font-family)',\n                                                        fontSize: 'var(--vscode-editor-font-size)'\n                                                    }\n                                                }}\n                                                language={lang || 'text'}\n                                                PreTag=\"div\"\n                                                wrapLongLines={true}\n                                                customStyle={{\n                                                    margin: '1em 0',\n                                                    padding: '0',\n                                                    width: '100%',\n                                                    overflow: 'auto'\n                                                }}\n                                                {...props}\n                                            >\n                                                {String(children).replace(/\\n$/, '')}\n                                            </SyntaxHighlighter>\n                                        );\n                                    }\n\n                                    // For inline code, use the VSCode theme variables directly\n                                    return (\n                                        <code\n                                            className={`inline-code ${className || ''}`}\n                                            {...props}\n                                        >\n                                            {children}\n                                        </code>\n                                    );\n                                }\n                            }}\n                        >\n                            {textContent}\n                        </ReactMarkdown>\n                    </div>\n                );\n            } else {\n                return null;\n            }\n        });\n    };\n\n    // Component to show generating response with intermediate content\n    const GeneratingIndicator = ({ onStop, intermediateContent = null }) => {\n        return (\n            <div className=\"generating-container\">\n                {intermediateContent && (\n                    <div className=\"intermediate-content\">\n                        <ReactMarkdown\n                            remarkPlugins={[remarkGfm]}\n                            components={{\n                                code({ node, inline, className, children, ...props }) {\n                                    const match = /language-(\\w+)/.exec(className || '');\n                                    const lang = match ? match[1] : '';\n\n                                    if (!inline) {\n                                        return (\n                                            <SyntaxHighlighter\n                                                style={{\n                                                    ...vscDarkPlus,\n                                                    'pre[class*=\"language-\"]': {\n                                                        background: 'var(--vscode-textCodeBlock-background)',\n                                                        margin: '1em 0',\n                                                        padding: '1em',\n                                                        borderRadius: '4px',\n                                                        border: '1px solid var(--vscode-widget-border)'\n                                                    },\n                                                    'code[class*=\"language-\"]': {\n                                                        background: 'var(--vscode-textCodeBlock-background)',\n                                                        padding: '0',\n                                                        fontFamily: 'var(--vscode-editor-font-family)',\n                                                        fontSize: 'var(--vscode-editor-font-size)'\n                                                    }\n                                                }}\n                                                language={lang || 'text'}\n                                                PreTag=\"div\"\n                                                wrapLongLines={true}\n                                                customStyle={{\n                                                    margin: '1em 0',\n                                                    padding: '0',\n                                                    width: '100%',\n                                                    overflow: 'auto'\n                                                }}\n                                                {...props}\n                                            >\n                                                {String(children).replace(/\\n$/, '')}\n                                            </SyntaxHighlighter>\n                                        );\n                                    }\n\n                                    return (\n                                        <code\n                                            className={`inline-code ${className || ''}`}\n                                            {...props}\n                                        >\n                                            {children}\n                                        </code>\n                                    );\n                                }\n                            }}\n                        >\n                            {intermediateContent}\n                        </ReactMarkdown>\n                    </div>\n                )}\n                <div className=\"generating-indicator\">\n                    <span>Generating response</span>\n                    <div className=\"generating-actions\">\n                        <button\n                            className=\"stop-button\"\n                            onClick={onStop}\n                            title=\"Stop generation\"\n                        >\n                            Stop\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    // Copy message content to clipboard\n    const copyMessageToClipboard = (message: Message) => {\n        if (!message.content || message.content.length === 0) {return;}\n\n        // Collect all text content\n        const textContent = message.content\n            .filter(item => item && item.type === 'text' && item.text && item.text.trim() !== '')\n            .map(item => item.text)\n            .join('\\n\\n');\n\n        if (textContent) {\n            navigator.clipboard.writeText(textContent).then(() => {\n                // Show success animation\n                if (message.id) {\n                    setCopiedMessageId(message.id);\n                    // Reset after animation completes\n                    setTimeout(() => setCopiedMessageId(null), 600);\n                }\n            });\n        }\n    };\n\n    // Remove code reference\n    const removeCodeReference = (id: string) => {\n        setCodeReferences(prev => prev.filter(ref => ref.id !== id));\n    };\n\n    // Code reference chip component\n    const CodeReferenceChip = ({ codeRef, onRemove }: { codeRef: CodeReference, onRemove: () => void }) => (\n        <div className=\"code-reference-chip\">\n            <span style={{ marginRight: '6px', display: 'flex', alignItems: 'center' }}>\n                <i className=\"codicon codicon-file-code\"></i>\n            </span>\n            <span style={{ display: 'flex', alignItems: 'center' }}>{codeRef.fileName}:{codeRef.startLine}-{codeRef.endLine}</span>\n            <button\n                onClick={onRemove}\n                style={{\n                    background: 'none',\n                    border: 'none',\n                    cursor: 'pointer',\n                    padding: '0 0 0 6px',\n                    color: 'var(--vscode-editor-foreground)',\n                    display: 'inline-flex',\n                    alignItems: 'center',\n                    opacity: 0.7\n                }}\n                onMouseOver={(e) => e.currentTarget.style.opacity = '1'}\n                onMouseOut={(e) => e.currentTarget.style.opacity = '0.7'}\n            >\n                <i className=\"codicon codicon-close\"></i>\n            </button>\n        </div>\n    );\n\n    // Request workspace context\n    const getWorkspaceContext = () => {\n        vscode.postMessage({\n            command: MessageType.GET_WORKSPACE_CONTEXT\n        });\n    };\n\n    // Request workspace context on component mount\n    useEffect(() => {\n        getWorkspaceContext();\n\n        // Set up a timer to periodically refresh the context\n        const timer = setInterval(() => {\n            getWorkspaceContext();\n        }, 30000); // Every 30 seconds\n\n        return () => clearInterval(timer);\n    }, []);\n\n    // Context info button component\n    const ContextInfoButton = () => (\n        <div\n            className=\"context-info-button\"\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n                fontSize: '11px',\n                color: 'var(--vscode-descriptionForeground)',\n                cursor: 'pointer',\n                padding: '2px 4px',\n                borderRadius: '3px',\n                backgroundColor: showContextInfo ? 'var(--vscode-button-background)' : 'transparent',\n                opacity: showContextInfo ? 1 : 0.7,\n                marginLeft: '8px'\n            }}\n            onClick={() => setShowContextInfo(!showContextInfo)}\n            title=\"Show/hide workspace context\"\n        >\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" style={{ marginRight: '3px' }}>\n                <path d=\"M14.5 2h-13l-.5.5v9l.5.5H4v2.5l.854.354L7.707 12H14.5l.5-.5v-9l-.5-.5zm-.5 9H7.5l-.354.146L5 13.293V11.5l-.5-.5H2V3h12v8z\" />\n                <path d=\"M7 5h1v1H7zm2 3V7H8v1h1zm0 0H8v1h1v-1z\" />\n            </svg>\n            <span style={{ maxWidth: '80px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n                {workspaceContext?.currentFile?.split('/').pop() || 'Context'}\n            </span>\n        </div>\n    );\n\n    // Context info panel\n    const ContextInfoPanel = () => {\n        if (!workspaceContext || !showContextInfo) {return null;}\n\n        return (\n            <div\n                className=\"context-info-panel\"\n                style={{\n                    position: 'absolute',\n                    top: '32px',\n                    right: '8px',\n                    width: '250px',\n                    backgroundColor: 'var(--vscode-editor-background)',\n                    border: '1px solid var(--vscode-panel-border)',\n                    borderRadius: '4px',\n                    padding: '8px',\n                    zIndex: 10,\n                    fontSize: '12px',\n                    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'\n                }}\n            >\n                <div style={{ marginBottom: '8px', fontWeight: 'bold' }}>Current Context</div>\n\n                {workspaceContext.currentFile && (\n                    <div style={{ marginBottom: '4px' }}>\n                        <strong>File:</strong> {workspaceContext.currentFile}\n                    </div>\n                )}\n\n                {workspaceContext.currentLanguage && (\n                    <div style={{ marginBottom: '4px' }}>\n                        <strong>Language:</strong> {workspaceContext.currentLanguage}\n                    </div>\n                )}\n\n                {workspaceContext.projectType && (\n                    <div style={{ marginBottom: '4px' }}>\n                        <strong>Project Type:</strong> {workspaceContext.projectType}\n                    </div>\n                )}\n\n                {workspaceContext.diagnostics && (\n                    <div style={{ marginBottom: '4px' }}>\n                        <strong>Issues:</strong> {workspaceContext.diagnostics.length}\n                    </div>\n                )}\n\n                {workspaceContext.openFiles && (\n                    <div style={{ marginBottom: '4px' }}>\n                        <strong>Open Files:</strong> {workspaceContext.openFiles.length}\n                    </div>\n                )}\n\n                <button\n                    style={{\n                        marginTop: '8px',\n                        padding: '4px 8px',\n                        backgroundColor: 'var(--vscode-button-background)',\n                        color: 'var(--vscode-button-foreground)',\n                        border: 'none',\n                        borderRadius: '2px',\n                        cursor: 'pointer',\n                        fontSize: '11px'\n                    }}\n                    onClick={() => vscode.postMessage({ command: 'goose.getDiagnostics' })}\n                >\n                    Ask About Current Issues\n                </button>\n            </div>\n        );\n    };\n\n    // Request sessions list\n    const fetchSessions = () => {\n        try {\n            console.log('Fetching sessions...');\n            vscode.postMessage({\n                command: MessageType.GET_SESSIONS\n            });\n        } catch (err) {\n            console.error('Error fetching sessions:', err);\n            // Ensure sessions state is valid even on error\n            setSessions([]);\n        }\n    };\n\n    const handleSessionSelect = (sessionId: string) => {\n        if (isLoading) {return;} // Prevent session switching during generation\n\n        // If we're already on this session, just close the drawer\n        if (sessionId === currentSessionId) {\n            setShowSessionDrawer(false);\n            return;\n        }\n\n        vscode.postMessage({\n            command: MessageType.SWITCH_SESSION,\n            sessionId\n        });\n\n        // Close the drawer after selection\n        setShowSessionDrawer(false);\n    };\n\n    const handleCreateSession = () => {\n        if (isLoading) {return;} // Prevent session creation during generation\n\n        vscode.postMessage({\n            command: MessageType.CREATE_SESSION\n        });\n\n        // Close the drawer after creation request\n        setShowSessionDrawer(false);\n    };\n\n    const toggleSessionDrawer = () => {\n        if (isLoading) {return;} // Prevent toggling during generation\n\n        // If we're opening the drawer, refresh the sessions list\n        if (!showSessionDrawer) {\n            fetchSessions();\n        }\n\n        setShowSessionDrawer(!showSessionDrawer);\n    };\n\n    // Find the current session from the sessions list with safer approach\n    const currentSession = React.useMemo(() => {\n        if (!Array.isArray(sessions) || sessions.length === 0 || !currentSessionId) {\n            return null;\n        }\n\n        const session = sessions.find(s => s && s.id === currentSessionId);\n\n        // Validate session structure\n        if (!session || !session.metadata || typeof session.metadata !== 'object') {\n            return null;\n        }\n\n        return session;\n    }, [sessions, currentSessionId]);\n\n    // Render function\n    return (\n        <div className=\"container\">\n            <Header\n                status={serverStatus}\n                currentSession={currentSession}\n                onToggleSessionDrawer={toggleSessionDrawer}\n                isGenerating={isLoading}\n            />\n\n            {showSessionDrawer && (\n                <SessionList\n                    sessions={sessions}\n                    currentSessionId={currentSessionId}\n                    onSessionSelect={handleSessionSelect}\n                    onCreateSession={handleCreateSession}\n                />\n            )}\n\n            {errorMessage && (\n                <div className=\"error-message\">\n                    {errorMessage}\n                </div>\n            )}\n\n            <div className=\"message-container\">\n                {messages.length === 0 ? (\n                    <div className=\"empty-state\">\n                        <div className=\"empty-state-content\">\n                            <h3>No messages yet</h3>\n                            <p>Start a conversation with Goose to get help with your code.</p>\n                        </div>\n                    </div>\n                ) : (\n                    // Filter out messages with empty content before mapping\n                    messages\n                        .filter(message => {\n                            // Skip messages with no content array\n                            if (!message.content || !Array.isArray(message.content)) {\n                                return false;\n                            }\n\n                            // Check if message has any non-empty text content\n                            const hasTextContent = message.content.some(item =>\n                                item.type === 'text' && item.text && item.text.trim() !== ''\n                            );\n\n                            // Check if message has any non-text content (like tool calls)\n                            const hasNonTextContent = message.content.some(item => item.type !== 'text');\n\n                            // Keep messages that have either text content or non-text content\n                            return hasTextContent || hasNonTextContent;\n                        })\n                        .map((message, index, filteredMessages) => {\n                            const isUser = message.role === 'user';\n                            const messageText = message.content\n                                .filter((item) => item.type === 'text')\n                                .map((item) => item.text)\n                                .join('\\n');\n\n                            // Skip rendering completely empty user messages\n                            if (isUser && (!messageText || messageText.trim() === '')) {\n                                return null;\n                            }\n\n                            // Create a group for consecutive messages from the same sender\n                            // Use filtered message array for prev message reference\n                            const prevMessage = index > 0 ? filteredMessages[index - 1] : null;\n                            const isFirstInGroup = !prevMessage || prevMessage.role !== message.role;\n\n                            return (\n                                <div\n                                    key={message.id}\n                                    className={`message-group ${isFirstInGroup ? 'first-in-group' : ''}`}\n                                >\n                                    {isFirstInGroup && (\n                                        <div className=\"vscode-message-group-header\">\n                                            <div className=\"vscode-message-group-role\">\n                                                {isUser ? 'You' : 'Goose'}\n                                            </div>\n                                            <div className=\"vscode-message-group-time\">\n                                                {(() => {\n                                                    // Ensure consistent timestamp handling\n                                                    const timestamp = typeof message.created === 'number' ?\n                                                        message.created : // If it's already a number, use it\n                                                        new Date(message.created).getTime(); // Otherwise convert string to number\n\n                                                    return new Date(timestamp).toLocaleTimeString(navigator.language, {\n                                                        hour: '2-digit',\n                                                        minute: '2-digit',\n                                                        hour12: false,\n                                                        timeZone: Intl.DateTimeFormat().resolvedOptions().timeZone\n                                                    });\n                                                })()}\n                                            </div>\n                                        </div>\n                                    )}\n\n                                    <div\n                                        className={`message ${isUser ? 'user' : 'ai'}`}\n                                    >\n                                        <div className=\"message-content\">\n                                            {isUser ? (\n                                                <div className=\"message-text\">\n                                                    <div className=\"message-role\">You</div>\n                                                    {messageText && messageText.trim() !== '' ? (\n                                                        messageText\n                                                    ) : (\n                                                        <i className=\"empty-content\">Empty message</i>\n                                                    )}\n                                                </div>\n                                            ) : (\n                                                <div className=\"message-text markdown\">\n                                                    {renderMessageContent(message.content)}\n                                                </div>\n                                            )}\n\n                                            <div className=\"message-actions\">\n                                                <button\n                                                    className={`copy-button ${copiedMessageId === message.id ? 'copied' : ''}`}\n                                                    onClick={() => {\n                                                        navigator.clipboard.writeText(messageText);\n                                                        setCopiedMessageId(message.id || null);\n                                                        setTimeout(() => setCopiedMessageId(null), 600);\n                                                    }}\n                                                    title=\"Copy message\"\n                                                >\n                                                    <i className={`codicon ${copiedMessageId === message.id ? 'codicon-check' : 'codicon-copy'}`}></i>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            );\n                        })\n                )}\n\n                {/* Loading/generating indicator */}\n                {isLoading && (\n                    <div className=\"generating-container\">\n                        <div className=\"generating-indicator\">\n                            <div className=\"dot-pulse\"></div>\n                            <span>Generating...</span>\n                            <button\n                                className=\"stop-generation-button\"\n                                onClick={stopGeneration}\n                                title=\"Stop generation\"\n                            >\n                                Stop\n                            </button>\n                        </div>\n                        {intermediateText && (\n                            <div className=\"intermediate-text\">\n                                <ReactMarkdown remarkPlugins={[remarkGfm]}>\n                                    {intermediateText}\n                                </ReactMarkdown>\n                            </div>\n                        )}\n                    </div>\n                )}\n\n                <div ref={messagesEndRef} />\n            </div>\n\n            <div className=\"input-container\">\n                {codeReferences.length > 0 && (\n                    <div className=\"code-references\">\n                        {codeReferences.map((ref) => (\n                            <div key={ref.id} className=\"code-reference-chip\">\n                                <span title={`${ref.filePath}:${ref.startLine}-${ref.endLine}`}>\n                                    {ref.fileName}:{ref.startLine}-{ref.endLine}\n                                </span>\n                                <button\n                                    onClick={() => {\n                                        setCodeReferences(codeReferences.filter(r => r.id !== ref.id));\n                                    }}\n                                    title=\"Remove code reference\"\n                                >\n                                    ×\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                )}\n\n                <div className=\"input-row\">\n                    <textarea\n                        value={inputMessage}\n                        onChange={(e) => setInputMessage(e.target.value)}\n                        onKeyDown={(e) => {\n                            if (e.key === 'Enter' && !e.shiftKey) {\n                                e.preventDefault();\n                                sendChatMessage();\n                            }\n                        }}\n                        placeholder=\"Ask Goose a question...\"\n                        disabled={isLoading}\n                    />\n\n                    <button\n                        onClick={isLoading ? stopGeneration : sendChatMessage}\n                        disabled={(!inputMessage.trim() && codeReferences.length === 0) && !isLoading}\n                        title={isLoading ? 'Stop generation' : 'Send message'}\n                    >\n                        {isLoading ? 'Stop' : 'Send'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/App-improved.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/App.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'fireEvent' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { MessageType } from '../test/mocks/types';\n\n// Mock the scrollIntoView method\nElement.prototype.scrollIntoView = vi.fn();\n\n// Mock the VSCode API\nconst mockPostMessage = vi.fn();\nconst mockGetState = vi.fn().mockReturnValue({ sessions: [], activeSessionId: null });\nconst mockSetState = vi.fn();\n\nbeforeEach(() => {\n    vi.resetAllMocks();\n    window.acquireVsCodeApi = vi.fn(() => ({\n        postMessage: mockPostMessage,\n        getState: mockGetState,\n        setState: mockSetState,\n    }));\n});\n\n// Mock ResizeObserver\nconst mockResizeObserver = vi.fn(() => ({\n    observe: vi.fn(),\n    unobserve: vi.fn(),\n    disconnect: vi.fn(),\n}));\n\n// Mock IntersectionObserver\nconst mockIntersectionObserver = vi.fn(() => ({\n    observe: vi.fn(),\n    unobserve: vi.fn(),\n    disconnect: vi.fn(),\n}));\n\n// Save the original\nconst originalAddEventListener = window.addEventListener;\n\nbeforeEach(() => {\n    vi.resetAllMocks();\n    window.ResizeObserver = mockResizeObserver;\n    window.IntersectionObserver = mockIntersectionObserver;\n\n    // Mock window.addEventListener to capture message event handlers\n    window.addEventListener = vi.fn((event, handler) => {\n        if (event === 'message') {\n            // Save the handler for later use in tests\n            (window as any).messageHandler = handler;\n        }\n        return originalAddEventListener(event, handler);\n    });\n});\n\nafterEach(() => {\n    // Restore original\n    window.addEventListener = originalAddEventListener;\n});\n\ndescribe('App Component Tests', () => {\n    describe('Basic UI Components', () => {\n        // Test placeholder component rendering\n        it('can render basic UI components', () => {\n            render(\n                <div className=\"container\">\n                    <div className=\"message-container\">\n                        <div className=\"empty-state\">\n                            <div className=\"empty-state-content\">\n                                <h3>No messages yet</h3>\n                                <p>Start a conversation with Goose to get help with your code.</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"input-container\">\n                        <div className=\"input-row\">\n                            <textarea placeholder=\"Ask Goose a question...\" />\n                            <button>Send</button>\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('No messages yet')).toBeInTheDocument();\n            expect(screen.getByText('Start a conversation with Goose to get help with your code.')).toBeInTheDocument();\n            expect(screen.getByPlaceholderText('Ask Goose a question...')).toBeInTheDocument();\n            expect(screen.getByRole('button', { name: 'Send' })).toBeInTheDocument();\n        });\n    });\n\n    describe('Message Rendering', () => {\n        it('can render user and assistant messages', () => {\n            const userMessage = {\n                id: 'user-1',\n                role: 'user',\n                created: Date.now(),\n                content: [{ type: 'text', text: 'Hello, Goose!' }]\n            };\n\n            const assistantMessage = {\n                id: 'assistant-1',\n                role: 'assistant',\n                created: Date.now(),\n                content: [{ type: 'text', text: 'Hello! How can I help you today?' }]\n            };\n\n            render(\n                <div className=\"message-container\">\n                    <div className=\"message-group first-in-group\">\n                        <div className=\"vscode-message-group-header\">\n                            <div className=\"vscode-message-group-role\">You</div>\n                        </div>\n                        <div className=\"message user\">\n                            <div className=\"message-content\">\n                                <div className=\"message-text\">{userMessage.content[0].text}</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"message-group first-in-group\">\n                        <div className=\"vscode-message-group-header\">\n                            <div className=\"vscode-message-group-role\">Goose</div>\n                        </div>\n                        <div className=\"message ai\">\n                            <div className=\"message-content\">\n                                <div className=\"message-text\">{assistantMessage.content[0].text}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('Hello, Goose!')).toBeInTheDocument();\n            expect(screen.getByText('Hello! How can I help you today?')).toBeInTheDocument();\n            expect(screen.getByText('You')).toBeInTheDocument();\n            expect(screen.getByText('Goose')).toBeInTheDocument();\n        });\n    });\n\n    describe('VSCode API Communication', () => {\n        it('can communicate with the VS Code API', () => {\n            // Get a reference to the VSCode API\n            const vscode = window.acquireVsCodeApi();\n\n            // Send a message to the extension\n            vscode.postMessage({\n                command: MessageType.HELLO,\n                text: 'Testing VSCode API'\n            });\n\n            // Check that the message was sent\n            expect(mockPostMessage).toHaveBeenCalledWith({\n                command: MessageType.HELLO,\n                text: 'Testing VSCode API'\n            });\n        });\n\n        it('can send a chat message', () => {\n            // Get a reference to the VSCode API\n            const vscode = window.acquireVsCodeApi();\n\n            // Send a chat message\n            vscode.postMessage({\n                command: MessageType.SEND_CHAT_MESSAGE,\n                text: 'Hello, Goose!',\n                codeReferences: [],\n                messageId: 'test-id',\n                sessionId: null\n            });\n\n            // Check that the message was sent with the right structure\n            expect(mockPostMessage).toHaveBeenCalledWith({\n                command: MessageType.SEND_CHAT_MESSAGE,\n                text: 'Hello, Goose!',\n                codeReferences: [],\n                messageId: 'test-id',\n                sessionId: null\n            });\n        });\n    });\n}); \n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/Header.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/Input.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":168,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { CodeReference } from '../test/mocks/types';\n\ndescribe('Input Functionality', () => {\n    describe('Text Input', () => {\n        it('renders input textarea and send button', () => {\n            render(\n                <div className=\"input-container\">\n                    <div className=\"input-row\">\n                        <textarea\n                            placeholder=\"Ask Goose a question...\"\n                        />\n                        <button>Send</button>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByPlaceholderText('Ask Goose a question...')).toBeInTheDocument();\n            expect(screen.getByRole('button', { name: 'Send' })).toBeInTheDocument();\n        });\n\n        it('allows typing in the textarea', async () => {\n            const user = userEvent.setup();\n            const onChange = vi.fn();\n\n            render(\n                <div className=\"input-container\">\n                    <div className=\"input-row\">\n                        <textarea\n                            placeholder=\"Ask Goose a question...\"\n                            onChange={onChange}\n                        />\n                        <button>Send</button>\n                    </div>\n                </div>\n            );\n\n            const textarea = screen.getByPlaceholderText('Ask Goose a question...');\n            await user.type(textarea, 'Hello, Goose!');\n\n            expect(onChange).toHaveBeenCalled();\n            expect(textarea).toHaveValue('Hello, Goose!');\n        });\n\n        it('disables textarea and changes button text when loading', () => {\n            render(\n                <div className=\"input-container\">\n                    <div className=\"input-row\">\n                        <textarea\n                            placeholder=\"Ask Goose a question...\"\n                            disabled={true}\n                        />\n                        <button\n                            disabled={false}\n                            title=\"Stop generation\"\n                        >\n                            Stop\n                        </button>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByPlaceholderText('Ask Goose a question...')).toBeDisabled();\n            expect(screen.getByRole('button', { name: 'Stop' })).toBeInTheDocument();\n            expect(screen.getByTitle('Stop generation')).toBeInTheDocument();\n        });\n    });\n\n    describe('Code References', () => {\n        it('renders code reference chips', () => {\n            const codeReferences: CodeReference[] = [\n                {\n                    id: 'ref-1',\n                    filePath: '/src/components/App.tsx',\n                    fileName: 'App.tsx',\n                    startLine: 10,\n                    endLine: 20,\n                    selectedText: 'const App = () => { ... }',\n                    languageId: 'typescript'\n                },\n                {\n                    id: 'ref-2',\n                    filePath: '/src/utils/helpers.ts',\n                    fileName: 'helpers.ts',\n                    startLine: 5,\n                    endLine: 15,\n                    selectedText: 'export function formatDate() { ... }',\n                    languageId: 'typescript'\n                }\n            ];\n\n            render(\n                <div className=\"code-references\">\n                    {codeReferences.map((ref) => (\n                        <div key={ref.id} className=\"code-reference-chip\">\n                            <span title={`${ref.filePath}:${ref.startLine}-${ref.endLine}`}>\n                                {ref.fileName}:{ref.startLine}-{ref.endLine}\n                            </span>\n                            <button title=\"Remove code reference\">×</button>\n                        </div>\n                    ))}\n                </div>\n            );\n\n            expect(screen.getByText('App.tsx:10-20')).toBeInTheDocument();\n            expect(screen.getByText('helpers.ts:5-15')).toBeInTheDocument();\n            expect(screen.getAllByTitle('Remove code reference').length).toBe(2);\n        });\n\n        it('calls remove handler when × button is clicked', async () => {\n            const user = userEvent.setup();\n            const removeHandler = vi.fn();\n\n            const codeReference: CodeReference = {\n                id: 'ref-1',\n                filePath: '/src/components/App.tsx',\n                fileName: 'App.tsx',\n                startLine: 10,\n                endLine: 20,\n                selectedText: 'const App = () => { ... }',\n                languageId: 'typescript'\n            };\n\n            render(\n                <div className=\"code-references\">\n                    <div className=\"code-reference-chip\">\n                        <span>\n                            {codeReference.fileName}:{codeReference.startLine}-{codeReference.endLine}\n                        </span>\n                        <button\n                            onClick={removeHandler}\n                            title=\"Remove code reference\"\n                        >\n                            ×\n                        </button>\n                    </div>\n                </div>\n            );\n\n            await user.click(screen.getByTitle('Remove code reference'));\n            expect(removeHandler).toHaveBeenCalledTimes(1);\n        });\n    });\n\n    describe('Form Submission', () => {\n        it('submits the form when send button is clicked', async () => {\n            const user = userEvent.setup();\n            const handleSubmit = vi.fn(e => e.preventDefault());\n\n            render(\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-container\">\n                        <div className=\"input-row\">\n                            <textarea placeholder=\"Ask Goose a question...\" />\n                            <button type=\"submit\">Send</button>\n                        </div>\n                    </div>\n                </form>\n            );\n\n            await user.click(screen.getByRole('button', { name: 'Send' }));\n            expect(handleSubmit).toHaveBeenCalledTimes(1);\n        });\n\n        it('submits the form when Enter is pressed (without Shift)', async () => {\n            const user = userEvent.setup();\n            const handleSubmit = vi.fn(e => e.preventDefault());\n            const handleKeyDown = vi.fn(e => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSubmit(e);\n                }\n            });\n\n            render(\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-container\">\n                        <div className=\"input-row\">\n                            <textarea\n                                placeholder=\"Ask Goose a question...\"\n                                onKeyDown={handleKeyDown}\n                            />\n                            <button type=\"submit\">Send</button>\n                        </div>\n                    </div>\n                </form>\n            );\n\n            const textarea = screen.getByPlaceholderText('Ask Goose a question...');\n            fireEvent.keyDown(textarea, { key: 'Enter', code: 'Enter' });\n\n            expect(handleKeyDown).toHaveBeenCalledTimes(1);\n            expect(handleSubmit).toHaveBeenCalledTimes(1);\n        });\n\n        it('does not submit when Shift+Enter is pressed', async () => {\n            const handleSubmit = vi.fn(e => e.preventDefault());\n            const handleKeyDown = vi.fn(e => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSubmit(e);\n                }\n            });\n\n            render(\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-container\">\n                        <div className=\"input-row\">\n                            <textarea\n                                placeholder=\"Ask Goose a question...\"\n                                onKeyDown={handleKeyDown}\n                            />\n                            <button type=\"submit\">Send</button>\n                        </div>\n                    </div>\n                </form>\n            );\n\n            const textarea = screen.getByPlaceholderText('Ask Goose a question...');\n            fireEvent.keyDown(textarea, { key: 'Enter', code: 'Enter', shiftKey: true });\n\n            expect(handleKeyDown).toHaveBeenCalledTimes(1);\n            expect(handleSubmit).not.toHaveBeenCalled();\n        });\n    });\n}); \n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/Messages.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'beforeEach' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MessageType' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { render, screen } from '@testing-library/react';\nimport { Message, MessageType, TextContent } from '../test/mocks/types';\n\n// Mock the scrollIntoView method\nElement.prototype.scrollIntoView = vi.fn();\n\ndescribe('Message Functionality', () => {\n    describe('Message Rendering', () => {\n        it('renders a user message with text content', () => {\n            const userMessage: Message = {\n                id: 'user-123',\n                role: 'user',\n                created: Date.now(),\n                content: [{\n                    type: 'text',\n                    text: 'How do I implement a React component?'\n                }] as TextContent[]\n            };\n\n            render(\n                <div className=\"message user\">\n                    <div className=\"message-content\">\n                        <div className=\"message-role\">You</div>\n                        <div className=\"message-text\">\n                            {userMessage.content[0].text}\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('You')).toBeInTheDocument();\n            expect(screen.getByText('How do I implement a React component?')).toBeInTheDocument();\n        });\n\n        it('renders an assistant message with text content', () => {\n            const assistantMessage: Message = {\n                id: 'assistant-123',\n                role: 'assistant',\n                created: Date.now(),\n                content: [{\n                    type: 'text',\n                    text: 'Here\\'s how to create a React component...'\n                }] as TextContent[]\n            };\n\n            render(\n                <div className=\"message ai\">\n                    <div className=\"message-content\">\n                        <div className=\"message-role\">Goose</div>\n                        <div className=\"message-text markdown\">\n                            {assistantMessage.content[0].text}\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('Goose')).toBeInTheDocument();\n            expect(screen.getByText('Here\\'s how to create a React component...')).toBeInTheDocument();\n        });\n\n        it('renders code block content within a message', () => {\n            const markdownWithCode = `\nHere's a simple React component:\n\n\\`\\`\\`jsx\nimport React from 'react';\n\nfunction MyComponent() {\n  return <div>Hello World</div>;\n}\n\nexport default MyComponent;\n\\`\\`\\`\n      `;\n\n            render(\n                <div className=\"message ai\">\n                    <div className=\"message-content\">\n                        <div className=\"message-text markdown\">\n                            {markdownWithCode}\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText(/Here's a simple React component/)).toBeInTheDocument();\n            expect(screen.getByText(/import React from 'react'/)).toBeInTheDocument();\n            expect(screen.getByText(/function MyComponent/)).toBeInTheDocument();\n        });\n    });\n\n    describe('Message Groups', () => {\n        it('renders a message group with header', () => {\n            const now = Date.now();\n            const time = new Date(now).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n            render(\n                <div className=\"message-group first-in-group\">\n                    <div className=\"vscode-message-group-header\">\n                        <div className=\"vscode-message-group-role\">You</div>\n                        <div className=\"vscode-message-group-time\">{time}</div>\n                    </div>\n                    <div className=\"message user\">\n                        <div className=\"message-content\">\n                            <div className=\"message-text\">Hello Goose!</div>\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('You')).toBeInTheDocument();\n            expect(screen.getByText('Hello Goose!')).toBeInTheDocument();\n            expect(screen.getByText(time)).toBeInTheDocument();\n        });\n\n        it('renders multiple messages in a conversation flow', () => {\n            render(\n                <div className=\"message-container\">\n                    {/* User message */}\n                    <div className=\"message-group first-in-group\">\n                        <div className=\"vscode-message-group-header\">\n                            <div className=\"vscode-message-group-role\">You</div>\n                        </div>\n                        <div className=\"message user\">\n                            <div className=\"message-content\">\n                                <div className=\"message-text\">What is React?</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* AI response */}\n                    <div className=\"message-group first-in-group\">\n                        <div className=\"vscode-message-group-header\">\n                            <div className=\"vscode-message-group-role\">Goose</div>\n                        </div>\n                        <div className=\"message ai\">\n                            <div className=\"message-content\">\n                                <div className=\"message-text\">React is a JavaScript library for building user interfaces.</div>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Follow-up user message */}\n                    <div className=\"message-group first-in-group\">\n                        <div className=\"vscode-message-group-header\">\n                            <div className=\"vscode-message-group-role\">You</div>\n                        </div>\n                        <div className=\"message user\">\n                            <div className=\"message-content\">\n                                <div className=\"message-text\">How do I install it?</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('What is React?')).toBeInTheDocument();\n            expect(screen.getByText('React is a JavaScript library for building user interfaces.')).toBeInTheDocument();\n            expect(screen.getByText('How do I install it?')).toBeInTheDocument();\n        });\n    });\n\n    describe('Message Formatting', () => {\n        it('renders markdown formatting in messages', () => {\n            const markdownText = `\n# Heading\n**Bold text**\n*Italic text*\n- List item 1\n- List item 2\n      `;\n\n            render(\n                <div className=\"message ai\">\n                    <div className=\"message-content\">\n                        <div className=\"message-text markdown\">\n                            {markdownText}\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText(/Heading/)).toBeInTheDocument();\n            expect(screen.getByText(/Bold text/)).toBeInTheDocument();\n            expect(screen.getByText(/Italic text/)).toBeInTheDocument();\n            expect(screen.getByText(/List item 1/)).toBeInTheDocument();\n            expect(screen.getByText(/List item 2/)).toBeInTheDocument();\n        });\n    });\n\n    describe('Empty and Loading States', () => {\n        it('renders empty state when no messages', () => {\n            render(\n                <div className=\"message-container\">\n                    <div className=\"empty-state\">\n                        <div className=\"empty-state-content\">\n                            <h3>No messages yet</h3>\n                            <p>Start a conversation with Goose to get help with your code.</p>\n                        </div>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('No messages yet')).toBeInTheDocument();\n            expect(screen.getByText('Start a conversation with Goose to get help with your code.')).toBeInTheDocument();\n        });\n\n        it('renders loading state during message generation', () => {\n            render(\n                <div className=\"generating-container\">\n                    <div className=\"generating-indicator\">\n                        <div className=\"dot-pulse\"></div>\n                        <span>Generating...</span>\n                        <button className=\"stop-generation-button\">Stop</button>\n                    </div>\n                </div>\n            );\n\n            expect(screen.getByText('Generating...')).toBeInTheDocument();\n            expect(screen.getByRole('button', { name: 'Stop' })).toBeInTheDocument();\n        });\n    });\n}); \n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/SessionIndicator.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'container' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":78,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { SessionIndicator } from '../components/SessionIndicator';\nimport { SessionMetadata } from '../components/SessionList';\n\ndescribe('SessionIndicator', () => {\n    const mockSession: SessionMetadata = {\n        id: '12345678-abcd-efgh',\n        metadata: {\n            title: 'Test Session',\n            createdAt: '2023-01-01T12:00:00Z',\n            updatedAt: '2023-01-01T12:30:00Z'\n        }\n    };\n\n    const mockToggleDrawer = vi.fn();\n\n    beforeEach(() => {\n        mockToggleDrawer.mockClear();\n    });\n\n    it('renders with a session title', () => {\n        render(\n            <SessionIndicator\n                currentSession={mockSession}\n                onToggleSessionDrawer={mockToggleDrawer}\n                isGenerating={false}\n            />\n        );\n\n        expect(screen.getByText('Test Session')).toBeInTheDocument();\n        expect(screen.getByTitle('Click to manage sessions')).toBeInTheDocument();\n    });\n\n    it('renders with a fallback session name when title is missing', () => {\n        const sessionWithoutTitle = {\n            ...mockSession,\n            metadata: { ...mockSession.metadata, title: '' }\n        };\n\n        render(\n            <SessionIndicator\n                currentSession={sessionWithoutTitle}\n                onToggleSessionDrawer={mockToggleDrawer}\n                isGenerating={false}\n            />\n        );\n\n        expect(screen.getByText(`Session ${mockSession.id.slice(0, 8)}`)).toBeInTheDocument();\n    });\n\n    it('renders \"New Chat\" when no session is provided', () => {\n        render(\n            <SessionIndicator\n                currentSession={null}\n                onToggleSessionDrawer={mockToggleDrawer}\n                isGenerating={false}\n            />\n        );\n\n        expect(screen.getByText('New Chat')).toBeInTheDocument();\n    });\n\n    it('calls toggle function when clicked', () => {\n        render(\n            <SessionIndicator\n                currentSession={mockSession}\n                onToggleSessionDrawer={mockToggleDrawer}\n                isGenerating={false}\n            />\n        );\n\n        fireEvent.click(screen.getByTitle('Click to manage sessions'));\n        expect(mockToggleDrawer).toHaveBeenCalledTimes(1);\n    });\n\n    it('has disabled class and does not call toggle function when clicked during generation', () => {\n        const { container } = render(\n            <SessionIndicator\n                currentSession={mockSession}\n                onToggleSessionDrawer={mockToggleDrawer}\n                isGenerating={true}\n            />\n        );\n\n        // Check that the indicator has the disabled class\n        const indicator = screen.getByTitle('Cannot change sessions while generating');\n        expect(indicator.className).toContain('disabled');\n\n        // In React Testing Library, fireEvent will always call the event handler,\n        // even if it's undefined. We're checking the element directly instead.\n        expect(indicator.getAttribute('onClick')).toBeNull();\n    });\n}); \n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/SessionList.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'within' is defined but never used. Allowed unused vars must match /^_/u.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent, within } from '@testing-library/react';\nimport { SessionList, SessionMetadata } from '../components/SessionList';\n\ndescribe('SessionList Component', () => {\n    it('renders empty state when no sessions are available', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        render(\n            <SessionList\n                sessions={[]}\n                currentSessionId={null}\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        expect(screen.getByText('Sessions')).toBeInTheDocument();\n        expect(screen.getByText('No saved sessions')).toBeInTheDocument();\n    });\n\n    it('renders a list of sessions', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        const sessions: SessionMetadata[] = [\n            {\n                id: 'session-1',\n                metadata: {\n                    title: 'Session 1',\n                    created: Date.now() - 10000,\n                    updated: Date.now()\n                }\n            },\n            {\n                id: 'session-2',\n                metadata: {\n                    title: 'Session 2',\n                    created: Date.now() - 20000,\n                    updated: Date.now() - 5000\n                }\n            }\n        ];\n\n        render(\n            <SessionList\n                sessions={sessions}\n                currentSessionId=\"session-1\"\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        expect(screen.getByText('Session 1')).toBeInTheDocument();\n        expect(screen.getByText('Session 2')).toBeInTheDocument();\n        expect(screen.queryByText('No saved sessions')).not.toBeInTheDocument();\n    });\n\n    it('highlights the current session', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        const sessions: SessionMetadata[] = [\n            {\n                id: 'session-1',\n                metadata: {\n                    title: 'Session 1',\n                    created: Date.now(),\n                    updated: Date.now()\n                }\n            },\n            {\n                id: 'session-2',\n                metadata: {\n                    title: 'Session 2',\n                    created: Date.now(),\n                    updated: Date.now()\n                }\n            }\n        ];\n\n        const { container } = render(\n            <SessionList\n                sessions={sessions}\n                currentSessionId=\"session-1\"\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        // Find the element containing \"Session 1\" to check if its parent has the \"active\" class\n        const sessionItems = container.querySelectorAll('.vscode-session-item');\n        expect(sessionItems[0]).toHaveClass('active');\n        expect(sessionItems[1]).not.toHaveClass('active');\n    });\n\n    it('calls onSessionSelect when a session is clicked', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        const sessions: SessionMetadata[] = [\n            {\n                id: 'session-1',\n                metadata: {\n                    title: 'Session 1',\n                    created: Date.now(),\n                    updated: Date.now()\n                }\n            }\n        ];\n\n        render(\n            <SessionList\n                sessions={sessions}\n                currentSessionId={null}\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        fireEvent.click(screen.getByText('Session 1'));\n        expect(mockSessionSelect).toHaveBeenCalledWith('session-1');\n    });\n\n    it('calls onCreateSession when the create button is clicked', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        render(\n            <SessionList\n                sessions={[]}\n                currentSessionId={null}\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        // Find the \"+\" button by its codicon\n        const createButton = screen.getByTitle('Create new session');\n        fireEvent.click(createButton);\n        expect(mockCreateSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('displays fallback for session with empty title', () => {\n        const mockSessionSelect = vi.fn();\n        const mockCreateSession = vi.fn();\n\n        const sessions: SessionMetadata[] = [\n            {\n                id: 'session-1',\n                metadata: {\n                    title: '', // Empty title\n                    created: Date.now(),\n                    updated: Date.now()\n                }\n            }\n        ];\n\n        const { container } = render(\n            <SessionList\n                sessions={sessions}\n                currentSessionId={null}\n                onSessionSelect={mockSessionSelect}\n                onCreateSession={mockCreateSession}\n            />\n        );\n\n        // Find the session item name element by class and check its content\n        const sessionItemName = container.querySelector('.vscode-session-item-name');\n        expect(sessionItemName).toBeInTheDocument();\n        expect(sessionItemName.textContent).toContain('Session');\n    });\n}); \n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/WorkspaceContext.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/__tests__/main.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'vi' is defined but never used. Allowed unused vars must match /^_/u.","line":1,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\n\n// Simple test for main.tsx that doesn't try to import the actual file\ndescribe('main.tsx', () => {\n    it('should exist and be a valid entry point', () => {\n        // This is just a simple test to ensure the file exists in coverage reports\n        expect(true).toBe(true);\n    });\n});\n","usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/components/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/components/SessionIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/components/SessionList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/test/mocks/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]},{"filePath":"/Users/prem/Development/goose/ui/vscode-extension/webview-ui/src/vscode.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"semi","replacedBy":["@stylistic/js/semi"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"semi","url":"https://eslint.style/rules/js/semi"}}]}}]}]
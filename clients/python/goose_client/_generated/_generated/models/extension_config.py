# coding: utf-8

"""
    goose-server

    An AI agent

    The version of the OpenAPI document: 1.9.0
    Contact: ai-oss-tools@block.xyz
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from goose_client._generated._generated.models.extension_config_one_of import ExtensionConfigOneOf
from goose_client._generated._generated.models.extension_config_one_of1 import ExtensionConfigOneOf1
from goose_client._generated._generated.models.extension_config_one_of2 import ExtensionConfigOneOf2
from goose_client._generated._generated.models.extension_config_one_of3 import ExtensionConfigOneOf3
from goose_client._generated._generated.models.extension_config_one_of4 import ExtensionConfigOneOf4
from goose_client._generated._generated.models.extension_config_one_of5 import ExtensionConfigOneOf5
from goose_client._generated._generated.models.extension_config_one_of6 import ExtensionConfigOneOf6
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EXTENSIONCONFIG_ONE_OF_SCHEMAS = ["ExtensionConfigOneOf", "ExtensionConfigOneOf1", "ExtensionConfigOneOf2", "ExtensionConfigOneOf3", "ExtensionConfigOneOf4", "ExtensionConfigOneOf5", "ExtensionConfigOneOf6"]

class ExtensionConfig(BaseModel):
    """
    Represents the different types of MCP extensions that can be added to the manager
    """
    # data type: ExtensionConfigOneOf
    oneof_schema_1_validator: Optional[ExtensionConfigOneOf] = None
    # data type: ExtensionConfigOneOf1
    oneof_schema_2_validator: Optional[ExtensionConfigOneOf1] = None
    # data type: ExtensionConfigOneOf2
    oneof_schema_3_validator: Optional[ExtensionConfigOneOf2] = None
    # data type: ExtensionConfigOneOf3
    oneof_schema_4_validator: Optional[ExtensionConfigOneOf3] = None
    # data type: ExtensionConfigOneOf4
    oneof_schema_5_validator: Optional[ExtensionConfigOneOf4] = None
    # data type: ExtensionConfigOneOf5
    oneof_schema_6_validator: Optional[ExtensionConfigOneOf5] = None
    # data type: ExtensionConfigOneOf6
    oneof_schema_7_validator: Optional[ExtensionConfigOneOf6] = None
    actual_instance: Optional[Union[ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6]] = None
    one_of_schemas: Set[str] = { "ExtensionConfigOneOf", "ExtensionConfigOneOf1", "ExtensionConfigOneOf2", "ExtensionConfigOneOf3", "ExtensionConfigOneOf4", "ExtensionConfigOneOf5", "ExtensionConfigOneOf6" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
        'ExtensionEntry': 'ExtensionEntry'
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ExtensionConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: ExtensionConfigOneOf
        if not isinstance(v, ExtensionConfigOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf1
        if not isinstance(v, ExtensionConfigOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf1`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf2
        if not isinstance(v, ExtensionConfigOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf2`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf3
        if not isinstance(v, ExtensionConfigOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf3`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf4
        if not isinstance(v, ExtensionConfigOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf4`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf5
        if not isinstance(v, ExtensionConfigOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf5`")
        else:
            match += 1
        # validate data type: ExtensionConfigOneOf6
        if not isinstance(v, ExtensionConfigOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExtensionConfigOneOf6`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ExtensionConfig with oneOf schemas: ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ExtensionConfig with oneOf schemas: ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ExtensionConfigOneOf
        try:
            instance.actual_instance = ExtensionConfigOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf1
        try:
            instance.actual_instance = ExtensionConfigOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf2
        try:
            instance.actual_instance = ExtensionConfigOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf3
        try:
            instance.actual_instance = ExtensionConfigOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf4
        try:
            instance.actual_instance = ExtensionConfigOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf5
        try:
            instance.actual_instance = ExtensionConfigOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExtensionConfigOneOf6
        try:
            instance.actual_instance = ExtensionConfigOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ExtensionConfig with oneOf schemas: ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ExtensionConfig with oneOf schemas: ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ExtensionConfigOneOf, ExtensionConfigOneOf1, ExtensionConfigOneOf2, ExtensionConfigOneOf3, ExtensionConfigOneOf4, ExtensionConfigOneOf5, ExtensionConfigOneOf6]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


